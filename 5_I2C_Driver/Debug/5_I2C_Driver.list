
5_I2C_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002180  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  080022b0  080022b0  000122b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002588  08002588  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002588  08002588  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002588  08002588  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002588  08002588  00012588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800258c  0800258c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000064  080025f4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  080025f4  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002402  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000836  00000000  00000000  0002248f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002e0  00000000  00000000  00022cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000278  00000000  00000000  00022fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011fab  00000000  00000000  00023220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003d52  00000000  00000000  000351cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a497  00000000  00000000  00038f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000933b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001288  00000000  00000000  00093404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	08002298 	.word	0x08002298

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	08002298 	.word	0x08002298

08000170 <__aeabi_d2uiz>:
 8000170:	004a      	lsls	r2, r1, #1
 8000172:	d211      	bcs.n	8000198 <__aeabi_d2uiz+0x28>
 8000174:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000178:	d211      	bcs.n	800019e <__aeabi_d2uiz+0x2e>
 800017a:	d50d      	bpl.n	8000198 <__aeabi_d2uiz+0x28>
 800017c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000180:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000184:	d40e      	bmi.n	80001a4 <__aeabi_d2uiz+0x34>
 8000186:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800018a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800018e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000192:	fa23 f002 	lsr.w	r0, r3, r2
 8000196:	4770      	bx	lr
 8000198:	f04f 0000 	mov.w	r0, #0
 800019c:	4770      	bx	lr
 800019e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80001a2:	d102      	bne.n	80001aa <__aeabi_d2uiz+0x3a>
 80001a4:	f04f 30ff 	mov.w	r0, #4294967295
 80001a8:	4770      	bx	lr
 80001aa:	f04f 0000 	mov.w	r0, #0
 80001ae:	4770      	bx	lr

080001b0 <i2c1_Init>:
#include <stm32f103xb.h>

#define I2C_DEBUG_USING_LED

void i2c1_Init()
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	/*Enable clock to i2c1 module on APB1 Bus*/
	RCC->APB1ENR |= (1 << 21);
 80001b4:	4b1e      	ldr	r3, [pc, #120]	; (8000230 <i2c1_Init+0x80>)
 80001b6:	69db      	ldr	r3, [r3, #28]
 80001b8:	4a1d      	ldr	r2, [pc, #116]	; (8000230 <i2c1_Init+0x80>)
 80001ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001be:	61d3      	str	r3, [r2, #28]

	/*Initiate I2C peripheral reset*/
	I2C1->CR1 |= (1 << 15);
 80001c0:	4b1c      	ldr	r3, [pc, #112]	; (8000234 <i2c1_Init+0x84>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a1b      	ldr	r2, [pc, #108]	; (8000234 <i2c1_Init+0x84>)
 80001c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80001ca:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1 << 15);
 80001cc:	4b19      	ldr	r3, [pc, #100]	; (8000234 <i2c1_Init+0x84>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a18      	ldr	r2, [pc, #96]	; (8000234 <i2c1_Init+0x84>)
 80001d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80001d6:	6013      	str	r3, [r2, #0]

	I2C1->CR2 = 8; /* The APB1 bus clock value which is 8MHz*/
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <i2c1_Init+0x84>)
 80001da:	2208      	movs	r2, #8
 80001dc:	605a      	str	r2, [r3, #4]
	I2C1->CCR |= 40; /* for 100 KHz standard mode*/
 80001de:	4b15      	ldr	r3, [pc, #84]	; (8000234 <i2c1_Init+0x84>)
 80001e0:	69db      	ldr	r3, [r3, #28]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <i2c1_Init+0x84>)
 80001e4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80001e8:	61d3      	str	r3, [r2, #28]
	I2C1->OAR1 = 0x4000; /*From page 776 bit 14 must be 1 */
 80001ea:	4b12      	ldr	r3, [pc, #72]	; (8000234 <i2c1_Init+0x84>)
 80001ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80001f0:	609a      	str	r2, [r3, #8]

	I2C1->TRISE = 9;
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <i2c1_Init+0x84>)
 80001f4:	2209      	movs	r2, #9
 80001f6:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= I2C_CR1_ACK; /*Enable ACK bit*/
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <i2c1_Init+0x84>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a0d      	ldr	r2, [pc, #52]	; (8000234 <i2c1_Init+0x84>)
 80001fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000202:	6013      	str	r3, [r2, #0]

	/*Enable clock for port B to use PB6 & PB7 as SCL & SDA on APB2 bus*/
	RCC->APB2ENR |= (1 << 3);
 8000204:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <i2c1_Init+0x80>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a09      	ldr	r2, [pc, #36]	; (8000230 <i2c1_Init+0x80>)
 800020a:	f043 0308 	orr.w	r3, r3, #8
 800020e:	6193      	str	r3, [r2, #24]

	/*Configure GPIO port pins for Open drain output alternate function with maximum speed*/
	GPIOB->CRL |= 0xFF << 24;
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <i2c1_Init+0x88>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <i2c1_Init+0x88>)
 8000216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800021a:	6013      	str	r3, [r2, #0]

	/*If no external pull-up resistors are present enable ODR bit for the corresponding pins*/

	/*Enable the I2C peripheral */
	I2C1->CR1 |= I2C_CR1_PE;
 800021c:	4b05      	ldr	r3, [pc, #20]	; (8000234 <i2c1_Init+0x84>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a04      	ldr	r2, [pc, #16]	; (8000234 <i2c1_Init+0x84>)
 8000222:	f043 0301 	orr.w	r3, r3, #1
 8000226:	6013      	str	r3, [r2, #0]
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	40021000 	.word	0x40021000
 8000234:	40005400 	.word	0x40005400
 8000238:	40010c00 	.word	0x40010c00

0800023c <i2c1_Write_Begin>:

void i2c1_Write_Begin(uint8_t s_address, uint8_t data)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	460a      	mov	r2, r1
 8000246:	71fb      	strb	r3, [r7, #7]
 8000248:	4613      	mov	r3, r2
 800024a:	71bb      	strb	r3, [r7, #6]
	volatile register uint8_t temp;
	/*Set Start bit (bit 8) in CR1 */
	/*to Generate a start condition*/
	I2C1->CR1 |= (1 << 8ul);
 800024c:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <i2c1_Write_Begin+0x7c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a19      	ldr	r2, [pc, #100]	; (80002b8 <i2c1_Write_Begin+0x7c>)
 8000252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000256:	6013      	str	r3, [r2, #0]

	/*Check if SB(bit 0) in SR1 is set which means that a start condition is generated*/
	while (!(I2C1->SR1 & 0x01))
 8000258:	e001      	b.n	800025e <i2c1_Write_Begin+0x22>
#ifdef I2C_DEBUG_USING_LED
		blue_On()	;
 800025a:	f000 f8ad 	bl	80003b8 <blue_On>
	while (!(I2C1->SR1 & 0x01))
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <i2c1_Write_Begin+0x7c>)
 8000260:	695b      	ldr	r3, [r3, #20]
 8000262:	f003 0301 	and.w	r3, r3, #1
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0f7      	beq.n	800025a <i2c1_Write_Begin+0x1e>
	blue_Off();
 800026a:	f000 f8b3 	bl	80003d4 <blue_Off>
#else
	;
#endif

	/*write the salve address in DR register */
	I2C1->DR = s_address;
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <i2c1_Write_Begin+0x7c>)
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	6113      	str	r3, [r2, #16]

	/*Check if ADDR (bit 1) is set in SR1 */
	/*Then its followed by reading SR2*/
	while (!(I2C1->SR1 & 0x02))
 8000274:	e001      	b.n	800027a <i2c1_Write_Begin+0x3e>
#ifdef I2C_DEBUG_USING_LED
		green_On();
 8000276:	f000 f883 	bl	8000380 <green_On>
	while (!(I2C1->SR1 & 0x02))
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <i2c1_Write_Begin+0x7c>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	f003 0302 	and.w	r3, r3, #2
 8000282:	2b00      	cmp	r3, #0
 8000284:	d0f7      	beq.n	8000276 <i2c1_Write_Begin+0x3a>
#else
	;
#endif
	temp = I2C1->SR2;
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <i2c1_Write_Begin+0x7c>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	73fb      	strb	r3, [r7, #15]
#ifdef I2C_DEBUG_USING_LED
	green_Off();
 800028e:	f000 f885 	bl	800039c <green_Off>
#endif

	/*Write data to DR register*/
	I2C1->DR = data;
 8000292:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <i2c1_Write_Begin+0x7c>)
 8000294:	79bb      	ldrb	r3, [r7, #6]
 8000296:	6113      	str	r3, [r2, #16]

	/*Check if TXE (bit 7) in SR1 is set*/

#ifdef I2C_DEBUG_USING_LED
	red_On();
 8000298:	f000 f856 	bl	8000348 <red_On>
#endif
	while (!(I2C1->SR1 & (1 << 7)))
 800029c:	bf00      	nop
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <i2c1_Write_Begin+0x7c>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0f9      	beq.n	800029e <i2c1_Write_Begin+0x62>
		;
#ifdef I2C_DEBUG_USING_LED
	red_Off();
 80002aa:	f000 f85b 	bl	8000364 <red_Off>
#endif


	/*Return*/
	return;
 80002ae:	bf00      	nop

}
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40005400 	.word	0x40005400

080002bc <i2c1_write>:

void i2c1_write(uint8_t data)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
	/*Write data buffer to DR register*/
	I2C1->DR = data;
 80002c6:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <i2c1_write+0x2c>)
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	6113      	str	r3, [r2, #16]

	/*Check if TXE bit in SR1 is set*/
	while (!(I2C1->SR1 & (1 << 7)))
 80002cc:	bf00      	nop
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <i2c1_write+0x2c>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f9      	beq.n	80002ce <i2c1_write+0x12>
		;

	/*Return*/
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40005400 	.word	0x40005400

080002ec <i2c1_End>:

	/*Return*/
}

void i2c1_End()
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	/*Set Stop (bit 9) in CR1 register to send a stop condition*/
	I2C1->CR1 |= (1 << 9);
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <i2c1_End+0x18>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a03      	ldr	r2, [pc, #12]	; (8000304 <i2c1_End+0x18>)
 80002f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002fa:	6013      	str	r3, [r2, #0]
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	40005400 	.word	0x40005400

08000308 <led_Init>:

#define LED_GPIOB_EN	(1U<<3) /*GPIOC Enable bit in RCC_APB2ENR Register*/


void led_Init(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	/*The LEDs on the blue pill are connected to PB14,PB13,PB12 which is located in GPIOB port*/
	/*Enable GPIO Port B In ABD2ENR Register p.113 ref_man*/
	RCC->APB2ENR |= LED_GPIOB_EN;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <led_Init+0x38>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a0b      	ldr	r2, [pc, #44]	; (8000340 <led_Init+0x38>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6193      	str	r3, [r2, #24]
	/*Set PB14,PB13,PB12 as Output pin in CRH register p.172 ref man*/
	/*CNFxx = 00 -> General Purpose output push/pull */
	/*MODExx = 01 -> Output mode, max speed 10MHz*/
	GPIOB->CRH &= ~((1<<17)|(1<<18)|(1<<19)|(1<<21)|(1<<22)|(1<<23)|(1<<25)|(1<<26)|(1<<27));
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <led_Init+0x3c>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	4a09      	ldr	r2, [pc, #36]	; (8000344 <led_Init+0x3c>)
 800031e:	f023 636e 	bic.w	r3, r3, #249561088	; 0xee00000
 8000322:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8000326:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= ((1<<16)|(1<<20)|(1<<24));
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <led_Init+0x3c>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4a05      	ldr	r2, [pc, #20]	; (8000344 <led_Init+0x3c>)
 800032e:	f043 7388 	orr.w	r3, r3, #17825792	; 0x1100000
 8000332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000336:	6053      	str	r3, [r2, #4]
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr
 8000340:	40021000 	.word	0x40021000
 8000344:	40010c00 	.word	0x40010c00

08000348 <red_On>:
	/*To set (ON) PC13 write 1 in position 13 of the register*/
//	GPIOC->BSRR |= (1<<13);
}

void red_On(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	GPIOB->BSRR |= (1<<14);
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <red_On+0x18>)
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	4a03      	ldr	r2, [pc, #12]	; (8000360 <red_On+0x18>)
 8000352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000356:	6113      	str	r3, [r2, #16]
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40010c00 	.word	0x40010c00

08000364 <red_Off>:
void red_Off(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
	GPIOB->BSRR |= (1<<30);
 8000368:	4b04      	ldr	r3, [pc, #16]	; (800037c <red_Off+0x18>)
 800036a:	691b      	ldr	r3, [r3, #16]
 800036c:	4a03      	ldr	r2, [pc, #12]	; (800037c <red_Off+0x18>)
 800036e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000372:	6113      	str	r3, [r2, #16]
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	40010c00 	.word	0x40010c00

08000380 <green_On>:

void green_On(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
	GPIOB->BSRR |= (1<<13);
 8000384:	4b04      	ldr	r3, [pc, #16]	; (8000398 <green_On+0x18>)
 8000386:	691b      	ldr	r3, [r3, #16]
 8000388:	4a03      	ldr	r2, [pc, #12]	; (8000398 <green_On+0x18>)
 800038a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800038e:	6113      	str	r3, [r2, #16]
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	40010c00 	.word	0x40010c00

0800039c <green_Off>:
void green_Off(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
	GPIOB->BSRR |= (1<<29);
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <green_Off+0x18>)
 80003a2:	691b      	ldr	r3, [r3, #16]
 80003a4:	4a03      	ldr	r2, [pc, #12]	; (80003b4 <green_Off+0x18>)
 80003a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80003aa:	6113      	str	r3, [r2, #16]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40010c00 	.word	0x40010c00

080003b8 <blue_On>:
void blue_On(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	GPIOB->BSRR |= (1<<12);
 80003bc:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <blue_On+0x18>)
 80003be:	691b      	ldr	r3, [r3, #16]
 80003c0:	4a03      	ldr	r2, [pc, #12]	; (80003d0 <blue_On+0x18>)
 80003c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003c6:	6113      	str	r3, [r2, #16]
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	40010c00 	.word	0x40010c00

080003d4 <blue_Off>:
void blue_Off(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	GPIOB->BSRR |= (1<<28);
 80003d8:	4b04      	ldr	r3, [pc, #16]	; (80003ec <blue_Off+0x18>)
 80003da:	691b      	ldr	r3, [r3, #16]
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <blue_Off+0x18>)
 80003de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e2:	6113      	str	r3, [r2, #16]
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40010c00 	.word	0x40010c00

080003f0 <ssd1306_I2C_Init>:

/*
 * SSD1306 Functions
 */
void ssd1306_I2C_Init()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0

	i2c1_Write_Begin(SSD1306_I2C_ADDR, 0x00);
 80003f6:	2100      	movs	r1, #0
 80003f8:	2078      	movs	r0, #120	; 0x78
 80003fa:	f7ff ff1f 	bl	800023c <i2c1_Write_Begin>
	for (uint8_t i = 0; i < sizeof(ssd1306_init); i++)
 80003fe:	2300      	movs	r3, #0
 8000400:	71fb      	strb	r3, [r7, #7]
 8000402:	e008      	b.n	8000416 <ssd1306_I2C_Init+0x26>
		i2c1_write(ssd1306_init[i]);
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4a08      	ldr	r2, [pc, #32]	; (8000428 <ssd1306_I2C_Init+0x38>)
 8000408:	5cd3      	ldrb	r3, [r2, r3]
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff56 	bl	80002bc <i2c1_write>
	for (uint8_t i = 0; i < sizeof(ssd1306_init); i++)
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	3301      	adds	r3, #1
 8000414:	71fb      	strb	r3, [r7, #7]
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	2b1c      	cmp	r3, #28
 800041a:	d9f3      	bls.n	8000404 <ssd1306_I2C_Init+0x14>
	i2c1_End();
 800041c:	f7ff ff66 	bl	80002ec <i2c1_End>
//	{
//		my_Frame.buffer0[i] = 0xAA;
//		my_Frame.buffer1[i] = 0x55;
//	}

}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	080022d0 	.word	0x080022d0

0800042c <ssd1306_I2C_Write_Frame>:
void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
	i2c1_write(data);
}
void ssd1306_I2C_Write_Frame()
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
	uint8_t m;
	uint16_t idx = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	80bb      	strh	r3, [r7, #4]

	for (m = 0; m < 8; m++)
 8000436:	2300      	movs	r3, #0
 8000438:	71fb      	strb	r3, [r7, #7]
 800043a:	e032      	b.n	80004a2 <ssd1306_I2C_Write_Frame+0x76>
	{
		i2c1_Write_Begin(SSD1306_I2C_ADDR, 0x00);
 800043c:	2100      	movs	r1, #0
 800043e:	2078      	movs	r0, #120	; 0x78
 8000440:	f7ff fefc 	bl	800023c <i2c1_Write_Begin>
		i2c1_write(0xB0 + m);
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	3b50      	subs	r3, #80	; 0x50
 8000448:	b2db      	uxtb	r3, r3
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff36 	bl	80002bc <i2c1_write>
		i2c1_write(0x00);
 8000450:	2000      	movs	r0, #0
 8000452:	f7ff ff33 	bl	80002bc <i2c1_write>
		i2c1_write(0x10);
 8000456:	2010      	movs	r0, #16
 8000458:	f7ff ff30 	bl	80002bc <i2c1_write>
		i2c1_End();
 800045c:	f7ff ff46 	bl	80002ec <i2c1_End>
		i2c1_Write_Begin(SSD1306_I2C_ADDR, 0x40);
 8000460:	2140      	movs	r1, #64	; 0x40
 8000462:	2078      	movs	r0, #120	; 0x78
 8000464:	f7ff feea 	bl	800023c <i2c1_Write_Begin>
		for (uint8_t i = 0; i < 128; i++)
 8000468:	2300      	movs	r3, #0
 800046a:	71bb      	strb	r3, [r7, #6]
 800046c:	e010      	b.n	8000490 <ssd1306_I2C_Write_Frame+0x64>
		{
			idx = (128 * m) + i;
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	b29b      	uxth	r3, r3
 8000472:	01db      	lsls	r3, r3, #7
 8000474:	b29a      	uxth	r2, r3
 8000476:	79bb      	ldrb	r3, [r7, #6]
 8000478:	b29b      	uxth	r3, r3
 800047a:	4413      	add	r3, r2
 800047c:	80bb      	strh	r3, [r7, #4]
			i2c1_write(ssd1306_Frame[idx]);
 800047e:	88bb      	ldrh	r3, [r7, #4]
 8000480:	4a0c      	ldr	r2, [pc, #48]	; (80004b4 <ssd1306_I2C_Write_Frame+0x88>)
 8000482:	5cd3      	ldrb	r3, [r2, r3]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff19 	bl	80002bc <i2c1_write>
		for (uint8_t i = 0; i < 128; i++)
 800048a:	79bb      	ldrb	r3, [r7, #6]
 800048c:	3301      	adds	r3, #1
 800048e:	71bb      	strb	r3, [r7, #6]
 8000490:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000494:	2b00      	cmp	r3, #0
 8000496:	daea      	bge.n	800046e <ssd1306_I2C_Write_Frame+0x42>
		}
		i2c1_End();
 8000498:	f7ff ff28 	bl	80002ec <i2c1_End>
	for (m = 0; m < 8; m++)
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	3301      	adds	r3, #1
 80004a0:	71fb      	strb	r3, [r7, #7]
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	2b07      	cmp	r3, #7
 80004a6:	d9c9      	bls.n	800043c <ssd1306_I2C_Write_Frame+0x10>
	}

}
 80004a8:	bf00      	nop
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000080 	.word	0x20000080

080004b8 <ssd1306_I2C_Clear>:
void ssd1306_I2C_Clear(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++)
 80004be:	2300      	movs	r3, #0
 80004c0:	71fb      	strb	r3, [r7, #7]
 80004c2:	e027      	b.n	8000514 <ssd1306_I2C_Clear+0x5c>
	{
		i2c1_Write_Begin(SSD1306_I2C_ADDR, 0x00);
 80004c4:	2100      	movs	r1, #0
 80004c6:	2078      	movs	r0, #120	; 0x78
 80004c8:	f7ff feb8 	bl	800023c <i2c1_Write_Begin>
		i2c1_write(0xB0 + m);
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	3b50      	subs	r3, #80	; 0x50
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff fef2 	bl	80002bc <i2c1_write>
		i2c1_write(0x00);
 80004d8:	2000      	movs	r0, #0
 80004da:	f7ff feef 	bl	80002bc <i2c1_write>
		i2c1_write(0x10);
 80004de:	2010      	movs	r0, #16
 80004e0:	f7ff feec 	bl	80002bc <i2c1_write>
		i2c1_End();
 80004e4:	f7ff ff02 	bl	80002ec <i2c1_End>
		i2c1_Write_Begin(SSD1306_I2C_ADDR, 0x40);
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	2078      	movs	r0, #120	; 0x78
 80004ec:	f7ff fea6 	bl	800023c <i2c1_Write_Begin>
		for (uint8_t i = 0; i < 128; i++)
 80004f0:	2300      	movs	r3, #0
 80004f2:	71bb      	strb	r3, [r7, #6]
 80004f4:	e005      	b.n	8000502 <ssd1306_I2C_Clear+0x4a>
			i2c1_write(0x00);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fee0 	bl	80002bc <i2c1_write>
		for (uint8_t i = 0; i < 128; i++)
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	3301      	adds	r3, #1
 8000500:	71bb      	strb	r3, [r7, #6]
 8000502:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000506:	2b00      	cmp	r3, #0
 8000508:	daf5      	bge.n	80004f6 <ssd1306_I2C_Clear+0x3e>
		i2c1_End();
 800050a:	f7ff feef 	bl	80002ec <i2c1_End>
	for (m = 0; m < 8; m++)
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	3301      	adds	r3, #1
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	2b07      	cmp	r3, #7
 8000518:	d9d4      	bls.n	80004c4 <ssd1306_I2C_Clear+0xc>
	}
}
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <ssd1306_I2C_Set>:

void ssd1306_I2C_Set(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++)
 800052a:	2300      	movs	r3, #0
 800052c:	71fb      	strb	r3, [r7, #7]
 800052e:	e027      	b.n	8000580 <ssd1306_I2C_Set+0x5c>
	{
		i2c1_Write_Begin(SSD1306_I2C_ADDR, 0x00);
 8000530:	2100      	movs	r1, #0
 8000532:	2078      	movs	r0, #120	; 0x78
 8000534:	f7ff fe82 	bl	800023c <i2c1_Write_Begin>
		i2c1_write(0xB0 + m);
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	3b50      	subs	r3, #80	; 0x50
 800053c:	b2db      	uxtb	r3, r3
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff febc 	bl	80002bc <i2c1_write>
		i2c1_write(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f7ff feb9 	bl	80002bc <i2c1_write>
		i2c1_write(0x10);
 800054a:	2010      	movs	r0, #16
 800054c:	f7ff feb6 	bl	80002bc <i2c1_write>
		i2c1_End();
 8000550:	f7ff fecc 	bl	80002ec <i2c1_End>
		i2c1_Write_Begin(SSD1306_I2C_ADDR, 0x40);
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	2078      	movs	r0, #120	; 0x78
 8000558:	f7ff fe70 	bl	800023c <i2c1_Write_Begin>
		for (uint8_t i = 0; i < 128; i++)
 800055c:	2300      	movs	r3, #0
 800055e:	71bb      	strb	r3, [r7, #6]
 8000560:	e005      	b.n	800056e <ssd1306_I2C_Set+0x4a>
			i2c1_write(0xFF);
 8000562:	20ff      	movs	r0, #255	; 0xff
 8000564:	f7ff feaa 	bl	80002bc <i2c1_write>
		for (uint8_t i = 0; i < 128; i++)
 8000568:	79bb      	ldrb	r3, [r7, #6]
 800056a:	3301      	adds	r3, #1
 800056c:	71bb      	strb	r3, [r7, #6]
 800056e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000572:	2b00      	cmp	r3, #0
 8000574:	daf5      	bge.n	8000562 <ssd1306_I2C_Set+0x3e>
		i2c1_End();
 8000576:	f7ff feb9 	bl	80002ec <i2c1_End>
	for (m = 0; m < 8; m++)
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	3301      	adds	r3, #1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	2b07      	cmp	r3, #7
 8000584:	d9d4      	bls.n	8000530 <ssd1306_I2C_Set+0xc>
	}
}
 8000586:	bf00      	nop
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <ssd1306_Draw_Pixel>:
	uint8_t x_point;
	uint8_t y_point;
} ssd1306_point;

void ssd1306_Draw_Pixel(uint8_t x_Pos, uint8_t y_Pos, ssd1306_color_t color)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
 800059a:	460b      	mov	r3, r1
 800059c:	71bb      	strb	r3, [r7, #6]
 800059e:	4613      	mov	r3, r2
 80005a0:	717b      	strb	r3, [r7, #5]
	/* Check of one of the coordinates is out of boundaries*/
	if (x_Pos >= SSD1306_Display_Width)
 80005a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	db38      	blt.n	800061c <ssd1306_Draw_Pixel+0x8c>
		return;
	if (y_Pos >= SSD1306_Display_Height)
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	2b3f      	cmp	r3, #63	; 0x3f
 80005ae:	d837      	bhi.n	8000620 <ssd1306_Draw_Pixel+0x90>
		return;
	uint8_t temp = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0; /*For more explaining of the code */
 80005b4:	2300      	movs	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]

	/* Calculate the index of the pixel in frame buffer*/
	/* Get the page number 0 ~ 7*/
	temp = (uint8_t) (y_Pos / 8);
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	08db      	lsrs	r3, r3, #3
 80005bc:	73bb      	strb	r3, [r7, #14]

	/* Load the correct address*/
	uint16_t idx = (temp * 128) + x_Pos;
 80005be:	7bbb      	ldrb	r3, [r7, #14]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	01db      	lsls	r3, r3, #7
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	4413      	add	r3, r2
 80005cc:	81bb      	strh	r3, [r7, #12]
	data = ssd1306_Frame[idx];
 80005ce:	89bb      	ldrh	r3, [r7, #12]
 80005d0:	4a16      	ldr	r2, [pc, #88]	; (800062c <ssd1306_Draw_Pixel+0x9c>)
 80005d2:	5cd3      	ldrb	r3, [r2, r3]
 80005d4:	73fb      	strb	r3, [r7, #15]

	/* Calculate the bit number of the pixel in the byte*/
	uint8_t temp2 = (y_Pos % 8);
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	f003 0307 	and.w	r3, r3, #7
 80005dc:	72fb      	strb	r3, [r7, #11]

	/*Set or clear the pixel according to color*/
	if (color == ssd1306_color_White) /*Set the pixel*/
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	2bff      	cmp	r3, #255	; 0xff
 80005e2:	d10a      	bne.n	80005fa <ssd1306_Draw_Pixel+0x6a>
		data |= (1 << temp2);
 80005e4:	7afb      	ldrb	r3, [r7, #11]
 80005e6:	2201      	movs	r2, #1
 80005e8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ec:	b25a      	sxtb	r2, r3
 80005ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	b25b      	sxtb	r3, r3
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	e00b      	b.n	8000612 <ssd1306_Draw_Pixel+0x82>
	else
		data &= ~(1 << temp2);
 80005fa:	7afb      	ldrb	r3, [r7, #11]
 80005fc:	2201      	movs	r2, #1
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	b25b      	sxtb	r3, r3
 8000604:	43db      	mvns	r3, r3
 8000606:	b25a      	sxtb	r2, r3
 8000608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800060c:	4013      	ands	r3, r2
 800060e:	b25b      	sxtb	r3, r3
 8000610:	73fb      	strb	r3, [r7, #15]

	ssd1306_Frame[idx] = data;
 8000612:	89bb      	ldrh	r3, [r7, #12]
 8000614:	4905      	ldr	r1, [pc, #20]	; (800062c <ssd1306_Draw_Pixel+0x9c>)
 8000616:	7bfa      	ldrb	r2, [r7, #15]
 8000618:	54ca      	strb	r2, [r1, r3]
 800061a:	e002      	b.n	8000622 <ssd1306_Draw_Pixel+0x92>
		return;
 800061c:	bf00      	nop
 800061e:	e000      	b.n	8000622 <ssd1306_Draw_Pixel+0x92>
		return;
 8000620:	bf00      	nop
}
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000080 	.word	0x20000080

08000630 <ssd1306_Draw_Line_H>:

void ssd1306_Draw_Line_H(uint8_t x_Start, uint8_t y_Start, uint8_t width,
		ssd1306_color_t color)
{
 8000630:	b490      	push	{r4, r7}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4604      	mov	r4, r0
 8000638:	4608      	mov	r0, r1
 800063a:	4611      	mov	r1, r2
 800063c:	461a      	mov	r2, r3
 800063e:	4623      	mov	r3, r4
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	4603      	mov	r3, r0
 8000644:	71bb      	strb	r3, [r7, #6]
 8000646:	460b      	mov	r3, r1
 8000648:	717b      	strb	r3, [r7, #5]
 800064a:	4613      	mov	r3, r2
 800064c:	713b      	strb	r3, [r7, #4]
	/* Check if the width is pointing to negative direction and correct it*/
	/*Not Implemented*/

	/* Check if the coordinates is out of display*/
	if ((y_Start > 63) || (x_Start > 127))
 800064e:	79bb      	ldrb	r3, [r7, #6]
 8000650:	2b3f      	cmp	r3, #63	; 0x3f
 8000652:	d848      	bhi.n	80006e6 <ssd1306_Draw_Line_H+0xb6>
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db44      	blt.n	80006e6 <ssd1306_Draw_Line_H+0xb6>
		return;

	/*Check if the line runs outside the screen boundaries and crop if true*/
	if ((x_Start + width) > 128)
 800065c:	79fa      	ldrb	r2, [r7, #7]
 800065e:	797b      	ldrb	r3, [r7, #5]
 8000660:	4413      	add	r3, r2
 8000662:	2b80      	cmp	r3, #128	; 0x80
 8000664:	dd03      	ble.n	800066e <ssd1306_Draw_Line_H+0x3e>
	{
		width = 127 - x_Start;
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800066c:	717b      	strb	r3, [r7, #5]
	}

	/* Calculate the Page Number in display*/
	uint8_t page = y_Start / 8;
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	08db      	lsrs	r3, r3, #3
 8000672:	72fb      	strb	r3, [r7, #11]

	/* Calculate the Pixel location in the byte*/
	uint8_t bit = y_Start % 8;
 8000674:	79bb      	ldrb	r3, [r7, #6]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	72bb      	strb	r3, [r7, #10]

	/* Define mask of pixel operation SET or Clear*/
	bit = ((color == ssd1306_color_White) ? (1 << bit) : (~(1 << bit)));
 800067c:	793b      	ldrb	r3, [r7, #4]
 800067e:	2bff      	cmp	r3, #255	; 0xff
 8000680:	d105      	bne.n	800068e <ssd1306_Draw_Line_H+0x5e>
 8000682:	7abb      	ldrb	r3, [r7, #10]
 8000684:	2201      	movs	r2, #1
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	b2db      	uxtb	r3, r3
 800068c:	e006      	b.n	800069c <ssd1306_Draw_Line_H+0x6c>
 800068e:	7abb      	ldrb	r3, [r7, #10]
 8000690:	2201      	movs	r2, #1
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	43db      	mvns	r3, r3
 800069a:	b2db      	uxtb	r3, r3
 800069c:	72bb      	strb	r3, [r7, #10]

	/* Get the location of the first byte in the frame buffer*/
	uint8_t *data = &ssd1306_Frame[page * 128 + x_Start];
 800069e:	7afb      	ldrb	r3, [r7, #11]
 80006a0:	01da      	lsls	r2, r3, #7
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4413      	add	r3, r2
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <ssd1306_Draw_Line_H+0xc0>)
 80006a8:	4413      	add	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]

	for (; width > 0; width--)
 80006ac:	e017      	b.n	80006de <ssd1306_Draw_Line_H+0xae>
	{
		if (color == ssd1306_color_White)
 80006ae:	793b      	ldrb	r3, [r7, #4]
 80006b0:	2bff      	cmp	r3, #255	; 0xff
 80006b2:	d107      	bne.n	80006c4 <ssd1306_Draw_Line_H+0x94>
			*data |= bit;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	781a      	ldrb	r2, [r3, #0]
 80006b8:	7abb      	ldrb	r3, [r7, #10]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	e006      	b.n	80006d2 <ssd1306_Draw_Line_H+0xa2>
		else
			*data &= bit;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	781a      	ldrb	r2, [r3, #0]
 80006c8:	7abb      	ldrb	r3, [r7, #10]
 80006ca:	4013      	ands	r3, r2
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	701a      	strb	r2, [r3, #0]

		data++;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
	for (; width > 0; width--)
 80006d8:	797b      	ldrb	r3, [r7, #5]
 80006da:	3b01      	subs	r3, #1
 80006dc:	717b      	strb	r3, [r7, #5]
 80006de:	797b      	ldrb	r3, [r7, #5]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1e4      	bne.n	80006ae <ssd1306_Draw_Line_H+0x7e>
 80006e4:	e000      	b.n	80006e8 <ssd1306_Draw_Line_H+0xb8>
		return;
 80006e6:	bf00      	nop
	}
}
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc90      	pop	{r4, r7}
 80006ee:	4770      	bx	lr
 80006f0:	20000080 	.word	0x20000080

080006f4 <ssd1306_Draw_Line_V>:

void ssd1306_Draw_Line_V(uint8_t x_Start, uint8_t y_Start, uint8_t height,
		ssd1306_color_t color)
{
 80006f4:	b490      	push	{r4, r7}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4604      	mov	r4, r0
 80006fc:	4608      	mov	r0, r1
 80006fe:	4611      	mov	r1, r2
 8000700:	461a      	mov	r2, r3
 8000702:	4623      	mov	r3, r4
 8000704:	71fb      	strb	r3, [r7, #7]
 8000706:	4603      	mov	r3, r0
 8000708:	71bb      	strb	r3, [r7, #6]
 800070a:	460b      	mov	r3, r1
 800070c:	717b      	strb	r3, [r7, #5]
 800070e:	4613      	mov	r3, r2
 8000710:	713b      	strb	r3, [r7, #4]
	/* Check if the width is pointing to negative direction and correct it*/
	/*Not Implemented*/

	/* Check if the coordinates is out of display*/
	if ((y_Start > 63) || (x_Start > 127))
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	2b3f      	cmp	r3, #63	; 0x3f
 8000716:	d876      	bhi.n	8000806 <ssd1306_Draw_Line_V+0x112>
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	db72      	blt.n	8000806 <ssd1306_Draw_Line_V+0x112>
		return;

	/*Check if the line runs outside the screen boundaries and crop if true*/
	if ((y_Start + height) > 64)
 8000720:	79ba      	ldrb	r2, [r7, #6]
 8000722:	797b      	ldrb	r3, [r7, #5]
 8000724:	4413      	add	r3, r2
 8000726:	2b40      	cmp	r3, #64	; 0x40
 8000728:	dd03      	ble.n	8000732 <ssd1306_Draw_Line_V+0x3e>
	{
		height = 64 - y_Start;
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000730:	717b      	strb	r3, [r7, #5]
	}

	/* Get the Page and bit location*/
	uint8_t page = y_Start / 8;
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	08db      	lsrs	r3, r3, #3
 8000736:	73bb      	strb	r3, [r7, #14]
	uint8_t bit = y_Start % 8; /* Indicates the bit location on scale of 0 ~ 7*/
 8000738:	79bb      	ldrb	r3, [r7, #6]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	75fb      	strb	r3, [r7, #23]

	/* Get the location of the first byte in the frame buffer*/
	uint8_t *data = &ssd1306_Frame[page * 128 + x_Start];
 8000740:	7bbb      	ldrb	r3, [r7, #14]
 8000742:	01da      	lsls	r2, r3, #7
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4413      	add	r3, r2
 8000748:	4a31      	ldr	r2, [pc, #196]	; (8000810 <ssd1306_Draw_Line_V+0x11c>)
 800074a:	4413      	add	r3, r2
 800074c:	613b      	str	r3, [r7, #16]

	uint8_t bitMask = 0xFF;
 800074e:	23ff      	movs	r3, #255	; 0xff
 8000750:	73fb      	strb	r3, [r7, #15]

	/* Test if the height of the line is still larger than the starting bit to the end of the byte*/
	while (height > 0)
 8000752:	e054      	b.n	80007fe <ssd1306_Draw_Line_V+0x10a>
	{
		if (height > (8 - bit))
 8000754:	797a      	ldrb	r2, [r7, #5]
 8000756:	7dfb      	ldrb	r3, [r7, #23]
 8000758:	f1c3 0308 	rsb	r3, r3, #8
 800075c:	429a      	cmp	r2, r3
 800075e:	dd25      	ble.n	80007ac <ssd1306_Draw_Line_V+0xb8>
		{
			bitMask <<= bit;
 8000760:	7bfa      	ldrb	r2, [r7, #15]
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	73fb      	strb	r3, [r7, #15]
			if (color == ssd1306_color_White)
 800076a:	793b      	ldrb	r3, [r7, #4]
 800076c:	2bff      	cmp	r3, #255	; 0xff
 800076e:	d107      	bne.n	8000780 <ssd1306_Draw_Line_V+0x8c>
				*data |= bitMask;
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	781a      	ldrb	r2, [r3, #0]
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	4313      	orrs	r3, r2
 8000778:	b2da      	uxtb	r2, r3
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	701a      	strb	r2, [r3, #0]
 800077e:	e00b      	b.n	8000798 <ssd1306_Draw_Line_V+0xa4>
			else
				*data &= ~bitMask;
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b25a      	sxtb	r2, r3
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	43db      	mvns	r3, r3
 800078c:	b25b      	sxtb	r3, r3
 800078e:	4013      	ands	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	b2da      	uxtb	r2, r3
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	701a      	strb	r2, [r3, #0]
			height -= (8 - bit);
 8000798:	7dfa      	ldrb	r2, [r7, #23]
 800079a:	797b      	ldrb	r3, [r7, #5]
 800079c:	4413      	add	r3, r2
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	3b08      	subs	r3, #8
 80007a2:	717b      	strb	r3, [r7, #5]
			data += 128;
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	3380      	adds	r3, #128	; 0x80
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	e024      	b.n	80007f6 <ssd1306_Draw_Line_V+0x102>
		}
		else
		{
			bitMask >>= (8 - height);
 80007ac:	7bfa      	ldrb	r2, [r7, #15]
 80007ae:	797b      	ldrb	r3, [r7, #5]
 80007b0:	f1c3 0308 	rsb	r3, r3, #8
 80007b4:	fa42 f303 	asr.w	r3, r2, r3
 80007b8:	73fb      	strb	r3, [r7, #15]
			bitMask <<= bit;
 80007ba:	7bfa      	ldrb	r2, [r7, #15]
 80007bc:	7dfb      	ldrb	r3, [r7, #23]
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	73fb      	strb	r3, [r7, #15]
			if (color == ssd1306_color_White)
 80007c4:	793b      	ldrb	r3, [r7, #4]
 80007c6:	2bff      	cmp	r3, #255	; 0xff
 80007c8:	d107      	bne.n	80007da <ssd1306_Draw_Line_V+0xe6>
				*data |= bitMask;
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	e00b      	b.n	80007f2 <ssd1306_Draw_Line_V+0xfe>
			else
				*data &= ~bitMask;
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b25a      	sxtb	r2, r3
 80007e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e4:	43db      	mvns	r3, r3
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	4013      	ands	r3, r2
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	701a      	strb	r2, [r3, #0]
			height = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	717b      	strb	r3, [r7, #5]

		}
		bit = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	75fb      	strb	r3, [r7, #23]
		bitMask = 0xFF;
 80007fa:	23ff      	movs	r3, #255	; 0xff
 80007fc:	73fb      	strb	r3, [r7, #15]
	while (height > 0)
 80007fe:	797b      	ldrb	r3, [r7, #5]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1a7      	bne.n	8000754 <ssd1306_Draw_Line_V+0x60>
 8000804:	e000      	b.n	8000808 <ssd1306_Draw_Line_V+0x114>
		return;
 8000806:	bf00      	nop
	}
}
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bc90      	pop	{r4, r7}
 800080e:	4770      	bx	lr
 8000810:	20000080 	.word	0x20000080

08000814 <ssd1306_Draw_Line>:

void ssd1306_Draw_Line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,
		ssd1306_color_t color)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b087      	sub	sp, #28
 8000818:	af00      	add	r7, sp, #0
 800081a:	4604      	mov	r4, r0
 800081c:	4608      	mov	r0, r1
 800081e:	4611      	mov	r1, r2
 8000820:	461a      	mov	r2, r3
 8000822:	4623      	mov	r3, r4
 8000824:	71fb      	strb	r3, [r7, #7]
 8000826:	4603      	mov	r3, r0
 8000828:	71bb      	strb	r3, [r7, #6]
 800082a:	460b      	mov	r3, r1
 800082c:	717b      	strb	r3, [r7, #5]
 800082e:	4613      	mov	r3, r2
 8000830:	713b      	strb	r3, [r7, #4]
	/* Check if any of the point is out of the display area and crop it*/
	if (x0 >= SSD1306_Display_Width)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	da01      	bge.n	800083e <ssd1306_Draw_Line+0x2a>
		x0 = SSD1306_Display_Width - 1;
 800083a:	237f      	movs	r3, #127	; 0x7f
 800083c:	71fb      	strb	r3, [r7, #7]
	if (x1 >= SSD1306_Display_Width)
 800083e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <ssd1306_Draw_Line+0x36>
		x1 = SSD1306_Display_Width - 1;
 8000846:	237f      	movs	r3, #127	; 0x7f
 8000848:	717b      	strb	r3, [r7, #5]
	if (y0 >= SSD1306_Display_Height)
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	2b3f      	cmp	r3, #63	; 0x3f
 800084e:	d901      	bls.n	8000854 <ssd1306_Draw_Line+0x40>
		y0 = SSD1306_Display_Height - 1;
 8000850:	233f      	movs	r3, #63	; 0x3f
 8000852:	71bb      	strb	r3, [r7, #6]
	if (y1 >= SSD1306_Display_Height)
 8000854:	793b      	ldrb	r3, [r7, #4]
 8000856:	2b3f      	cmp	r3, #63	; 0x3f
 8000858:	d901      	bls.n	800085e <ssd1306_Draw_Line+0x4a>
		y1 = SSD1306_Display_Height - 1;
 800085a:	233f      	movs	r3, #63	; 0x3f
 800085c:	713b      	strb	r3, [r7, #4]

	int16_t dx; //= (x1 - x0);
	int16_t dy; //= -(y1 - y0);
	uint8_t sx = x0 < x1 ? 1 : -1;
 800085e:	79fa      	ldrb	r2, [r7, #7]
 8000860:	797b      	ldrb	r3, [r7, #5]
 8000862:	429a      	cmp	r2, r3
 8000864:	d201      	bcs.n	800086a <ssd1306_Draw_Line+0x56>
 8000866:	2301      	movs	r3, #1
 8000868:	e000      	b.n	800086c <ssd1306_Draw_Line+0x58>
 800086a:	23ff      	movs	r3, #255	; 0xff
 800086c:	757b      	strb	r3, [r7, #21]
	uint8_t sy = y0 < y1 ? 1 : -1;
 800086e:	79ba      	ldrb	r2, [r7, #6]
 8000870:	793b      	ldrb	r3, [r7, #4]
 8000872:	429a      	cmp	r2, r3
 8000874:	d201      	bcs.n	800087a <ssd1306_Draw_Line+0x66>
 8000876:	2301      	movs	r3, #1
 8000878:	e000      	b.n	800087c <ssd1306_Draw_Line+0x68>
 800087a:	23ff      	movs	r3, #255	; 0xff
 800087c:	753b      	strb	r3, [r7, #20]
	int16_t e2; /* error value e_xy */
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	797b      	ldrb	r3, [r7, #5]
 8000882:	429a      	cmp	r2, r3
 8000884:	d207      	bcs.n	8000896 <ssd1306_Draw_Line+0x82>
 8000886:	797b      	ldrb	r3, [r7, #5]
 8000888:	b29a      	uxth	r2, r3
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	b29b      	uxth	r3, r3
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	b29b      	uxth	r3, r3
 8000892:	b21b      	sxth	r3, r3
 8000894:	e006      	b.n	80008a4 <ssd1306_Draw_Line+0x90>
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	b29a      	uxth	r2, r3
 800089a:	797b      	ldrb	r3, [r7, #5]
 800089c:	b29b      	uxth	r3, r3
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	b21b      	sxth	r3, r3
 80008a4:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 80008a6:	79ba      	ldrb	r2, [r7, #6]
 80008a8:	793b      	ldrb	r3, [r7, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d207      	bcs.n	80008be <ssd1306_Draw_Line+0xaa>
 80008ae:	793b      	ldrb	r3, [r7, #4]
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	e006      	b.n	80008cc <ssd1306_Draw_Line+0xb8>
 80008be:	79bb      	ldrb	r3, [r7, #6]
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	793b      	ldrb	r3, [r7, #4]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	823b      	strh	r3, [r7, #16]
	int16_t err = ((dx > dy) ? dx : -dy) / 2;
 80008ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80008d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	dd06      	ble.n	80008e8 <ssd1306_Draw_Line+0xd4>
 80008da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008de:	0fda      	lsrs	r2, r3, #31
 80008e0:	4413      	add	r3, r2
 80008e2:	105b      	asrs	r3, r3, #1
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	e006      	b.n	80008f6 <ssd1306_Draw_Line+0xe2>
 80008e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80008ec:	0fda      	lsrs	r2, r3, #31
 80008ee:	4413      	add	r3, r2
 80008f0:	105b      	asrs	r3, r3, #1
 80008f2:	425b      	negs	r3, r3
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	82fb      	strh	r3, [r7, #22]

	if (dx == 0)
 80008f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d10f      	bne.n	8000920 <ssd1306_Draw_Line+0x10c>
	{
		ssd1306_Draw_Line_V(x0, ((y0 < y1) ? (y0) : (y1)), (dy + 1), color);
 8000900:	793a      	ldrb	r2, [r7, #4]
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	4293      	cmp	r3, r2
 8000906:	bf28      	it	cs
 8000908:	4613      	movcs	r3, r2
 800090a:	b2d9      	uxtb	r1, r3
 800090c:	8a3b      	ldrh	r3, [r7, #16]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	3301      	adds	r3, #1
 8000912:	b2da      	uxtb	r2, r3
 8000914:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000918:	79f8      	ldrb	r0, [r7, #7]
 800091a:	f7ff feeb 	bl	80006f4 <ssd1306_Draw_Line_V>
		return;
 800091e:	e045      	b.n	80009ac <ssd1306_Draw_Line+0x198>
	}

	if (dy == 0)
 8000920:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d10f      	bne.n	8000948 <ssd1306_Draw_Line+0x134>
	{
		ssd1306_Draw_Line_H((x0 < x1) ? (x0) : (x1), y0, (dx + 1), color);
 8000928:	797a      	ldrb	r2, [r7, #5]
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	4293      	cmp	r3, r2
 800092e:	bf28      	it	cs
 8000930:	4613      	movcs	r3, r2
 8000932:	b2d8      	uxtb	r0, r3
 8000934:	8a7b      	ldrh	r3, [r7, #18]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	3301      	adds	r3, #1
 800093a:	b2da      	uxtb	r2, r3
 800093c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000940:	79b9      	ldrb	r1, [r7, #6]
 8000942:	f7ff fe75 	bl	8000630 <ssd1306_Draw_Line_H>

		return;
 8000946:	e031      	b.n	80009ac <ssd1306_Draw_Line+0x198>
	}

	for (;;)
	{ /* loop */
		ssd1306_Draw_Pixel(x0, y0, color);
 8000948:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800094c:	79b9      	ldrb	r1, [r7, #6]
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fe1d 	bl	8000590 <ssd1306_Draw_Pixel>

		if (x0 == x1 && y0 == y1)
 8000956:	79fa      	ldrb	r2, [r7, #7]
 8000958:	797b      	ldrb	r3, [r7, #5]
 800095a:	429a      	cmp	r2, r3
 800095c:	d103      	bne.n	8000966 <ssd1306_Draw_Line+0x152>
 800095e:	79ba      	ldrb	r2, [r7, #6]
 8000960:	793b      	ldrb	r3, [r7, #4]
 8000962:	429a      	cmp	r2, r3
 8000964:	d021      	beq.n	80009aa <ssd1306_Draw_Line+0x196>
		{
			break;
		}
		e2 = err;
 8000966:	8afb      	ldrh	r3, [r7, #22]
 8000968:	81fb      	strh	r3, [r7, #14]
		if (e2 > -dx)
 800096a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800096e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000972:	425b      	negs	r3, r3
 8000974:	429a      	cmp	r2, r3
 8000976:	dd08      	ble.n	800098a <ssd1306_Draw_Line+0x176>
		{
			err -= dy;
 8000978:	8afa      	ldrh	r2, [r7, #22]
 800097a:	8a3b      	ldrh	r3, [r7, #16]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	b29b      	uxth	r3, r3
 8000980:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000982:	79fa      	ldrb	r2, [r7, #7]
 8000984:	7d7b      	ldrb	r3, [r7, #21]
 8000986:	4413      	add	r3, r2
 8000988:	71fb      	strb	r3, [r7, #7]
		}
		if (e2 < dy)
 800098a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800098e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000992:	429a      	cmp	r2, r3
 8000994:	dad8      	bge.n	8000948 <ssd1306_Draw_Line+0x134>
		{
			err += dx;
 8000996:	8afa      	ldrh	r2, [r7, #22]
 8000998:	8a7b      	ldrh	r3, [r7, #18]
 800099a:	4413      	add	r3, r2
 800099c:	b29b      	uxth	r3, r3
 800099e:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80009a0:	79ba      	ldrb	r2, [r7, #6]
 80009a2:	7d3b      	ldrb	r3, [r7, #20]
 80009a4:	4413      	add	r3, r2
 80009a6:	71bb      	strb	r3, [r7, #6]
		ssd1306_Draw_Pixel(x0, y0, color);
 80009a8:	e7ce      	b.n	8000948 <ssd1306_Draw_Line+0x134>
			break;
 80009aa:	bf00      	nop
		}
	}
}
 80009ac:	371c      	adds	r7, #28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd90      	pop	{r4, r7, pc}

080009b2 <ssd1306_Draw_Direct_Rectangle>:

void ssd1306_Draw_Direct_Rectangle(uint8_t x0, uint8_t y0, uint8_t x1,
		uint8_t y1, ssd1306_color_t color)
{
 80009b2:	b590      	push	{r4, r7, lr}
 80009b4:	b085      	sub	sp, #20
 80009b6:	af02      	add	r7, sp, #8
 80009b8:	4604      	mov	r4, r0
 80009ba:	4608      	mov	r0, r1
 80009bc:	4611      	mov	r1, r2
 80009be:	461a      	mov	r2, r3
 80009c0:	4623      	mov	r3, r4
 80009c2:	71fb      	strb	r3, [r7, #7]
 80009c4:	4603      	mov	r3, r0
 80009c6:	71bb      	strb	r3, [r7, #6]
 80009c8:	460b      	mov	r3, r1
 80009ca:	717b      	strb	r3, [r7, #5]
 80009cc:	4613      	mov	r3, r2
 80009ce:	713b      	strb	r3, [r7, #4]
	ssd1306_Draw_Line(x0, y0, x0, y1, color);
 80009d0:	793c      	ldrb	r4, [r7, #4]
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	79b9      	ldrb	r1, [r7, #6]
 80009d6:	79f8      	ldrb	r0, [r7, #7]
 80009d8:	7e3b      	ldrb	r3, [r7, #24]
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	4623      	mov	r3, r4
 80009de:	f7ff ff19 	bl	8000814 <ssd1306_Draw_Line>
	ssd1306_Draw_Line(x0, y1, x1, y1, color);
 80009e2:	793c      	ldrb	r4, [r7, #4]
 80009e4:	797a      	ldrb	r2, [r7, #5]
 80009e6:	7939      	ldrb	r1, [r7, #4]
 80009e8:	79f8      	ldrb	r0, [r7, #7]
 80009ea:	7e3b      	ldrb	r3, [r7, #24]
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	4623      	mov	r3, r4
 80009f0:	f7ff ff10 	bl	8000814 <ssd1306_Draw_Line>
	ssd1306_Draw_Line(x1, y0, x1, y1, color);
 80009f4:	793c      	ldrb	r4, [r7, #4]
 80009f6:	797a      	ldrb	r2, [r7, #5]
 80009f8:	79b9      	ldrb	r1, [r7, #6]
 80009fa:	7978      	ldrb	r0, [r7, #5]
 80009fc:	7e3b      	ldrb	r3, [r7, #24]
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	4623      	mov	r3, r4
 8000a02:	f7ff ff07 	bl	8000814 <ssd1306_Draw_Line>
	ssd1306_Draw_Line(x0, y0, x1, y0, color);
 8000a06:	79bc      	ldrb	r4, [r7, #6]
 8000a08:	797a      	ldrb	r2, [r7, #5]
 8000a0a:	79b9      	ldrb	r1, [r7, #6]
 8000a0c:	79f8      	ldrb	r0, [r7, #7]
 8000a0e:	7e3b      	ldrb	r3, [r7, #24]
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	4623      	mov	r3, r4
 8000a14:	f7ff fefe 	bl	8000814 <ssd1306_Draw_Line>

}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd90      	pop	{r4, r7, pc}

08000a20 <ssd1306_Draw_Recangle_Filled>:

void ssd1306_Draw_Recangle_Filled(uint8_t x0, uint8_t y0, uint8_t x1,
		uint8_t y1, ssd1306_color_t color)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4604      	mov	r4, r0
 8000a28:	4608      	mov	r0, r1
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4623      	mov	r3, r4
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	4603      	mov	r3, r0
 8000a34:	71bb      	strb	r3, [r7, #6]
 8000a36:	460b      	mov	r3, r1
 8000a38:	717b      	strb	r3, [r7, #5]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	713b      	strb	r3, [r7, #4]
	if ((x0 > x1) | (y0 > y1))
 8000a3e:	79fa      	ldrb	r2, [r7, #7]
 8000a40:	797b      	ldrb	r3, [r7, #5]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	bf8c      	ite	hi
 8000a46:	2301      	movhi	r3, #1
 8000a48:	2300      	movls	r3, #0
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	79b9      	ldrb	r1, [r7, #6]
 8000a4e:	793b      	ldrb	r3, [r7, #4]
 8000a50:	4299      	cmp	r1, r3
 8000a52:	bf8c      	ite	hi
 8000a54:	2301      	movhi	r3, #1
 8000a56:	2300      	movls	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d11e      	bne.n	8000aa0 <ssd1306_Draw_Recangle_Filled+0x80>
		return;

	uint8_t dx = x1 - x0;
 8000a62:	797a      	ldrb	r2, [r7, #5]
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	73bb      	strb	r3, [r7, #14]
	uint8_t dy = y1 - y0 + 1;
 8000a6a:	793a      	ldrb	r2, [r7, #4]
 8000a6c:	79bb      	ldrb	r3, [r7, #6]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	3301      	adds	r3, #1
 8000a74:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i <= dx; i++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	73fb      	strb	r3, [r7, #15]
 8000a7a:	e00c      	b.n	8000a96 <ssd1306_Draw_Recangle_Filled+0x76>
	{
		ssd1306_Draw_Line_V(x0 + i, y0, dy, color);
 8000a7c:	79fa      	ldrb	r2, [r7, #7]
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	4413      	add	r3, r2
 8000a82:	b2d8      	uxtb	r0, r3
 8000a84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a88:	7b7a      	ldrb	r2, [r7, #13]
 8000a8a:	79b9      	ldrb	r1, [r7, #6]
 8000a8c:	f7ff fe32 	bl	80006f4 <ssd1306_Draw_Line_V>
	for (uint8_t i = 0; i <= dx; i++)
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	3301      	adds	r3, #1
 8000a94:	73fb      	strb	r3, [r7, #15]
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d9ee      	bls.n	8000a7c <ssd1306_Draw_Recangle_Filled+0x5c>
 8000a9e:	e000      	b.n	8000aa2 <ssd1306_Draw_Recangle_Filled+0x82>
		return;
 8000aa0:	bf00      	nop
	}
}
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd90      	pop	{r4, r7, pc}

08000aa8 <ssd1306_Draw_Rectangle>:

void ssd1306_Draw_Rectangle(ssd1306_point P0, ssd1306_point P1,
		ssd1306_point p2, ssd1306_point P3, ssd1306_color_t color)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	81b8      	strh	r0, [r7, #12]
 8000ab0:	8139      	strh	r1, [r7, #8]
 8000ab2:	80ba      	strh	r2, [r7, #4]
 8000ab4:	803b      	strh	r3, [r7, #0]
	ssd1306_Draw_Line(P0.x_point, P0.y_point, P1.x_point, P1.y_point, color);
 8000ab6:	7b38      	ldrb	r0, [r7, #12]
 8000ab8:	7b79      	ldrb	r1, [r7, #13]
 8000aba:	7a3a      	ldrb	r2, [r7, #8]
 8000abc:	7a7c      	ldrb	r4, [r7, #9]
 8000abe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	4623      	mov	r3, r4
 8000ac6:	f7ff fea5 	bl	8000814 <ssd1306_Draw_Line>
	ssd1306_Draw_Line(P1.x_point, P1.y_point, p2.x_point, p2.y_point, color);
 8000aca:	7a38      	ldrb	r0, [r7, #8]
 8000acc:	7a79      	ldrb	r1, [r7, #9]
 8000ace:	793a      	ldrb	r2, [r7, #4]
 8000ad0:	797c      	ldrb	r4, [r7, #5]
 8000ad2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	4623      	mov	r3, r4
 8000ada:	f7ff fe9b 	bl	8000814 <ssd1306_Draw_Line>
	ssd1306_Draw_Line(p2.x_point, p2.y_point, P3.x_point, P3.y_point, color);
 8000ade:	7938      	ldrb	r0, [r7, #4]
 8000ae0:	7979      	ldrb	r1, [r7, #5]
 8000ae2:	783a      	ldrb	r2, [r7, #0]
 8000ae4:	787c      	ldrb	r4, [r7, #1]
 8000ae6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	4623      	mov	r3, r4
 8000aee:	f7ff fe91 	bl	8000814 <ssd1306_Draw_Line>
	ssd1306_Draw_Line(P3.x_point, P3.y_point, P0.x_point, P0.y_point, color);
 8000af2:	7838      	ldrb	r0, [r7, #0]
 8000af4:	7879      	ldrb	r1, [r7, #1]
 8000af6:	7b3a      	ldrb	r2, [r7, #12]
 8000af8:	7b7c      	ldrb	r4, [r7, #13]
 8000afa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	4623      	mov	r3, r4
 8000b02:	f7ff fe87 	bl	8000814 <ssd1306_Draw_Line>
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd90      	pop	{r4, r7, pc}

08000b0e <ssd1306_Draw_Bitmap>:

void ssd1306_Draw_Bitmap(uint8_t x_start, uint8_t y_start, const uint8_t *image,
		uint8_t width, uint8_t height)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b084      	sub	sp, #16
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	603a      	str	r2, [r7, #0]
 8000b16:	461a      	mov	r2, r3
 8000b18:	4603      	mov	r3, r0
 8000b1a:	71fb      	strb	r3, [r7, #7]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	71bb      	strb	r3, [r7, #6]
 8000b20:	4613      	mov	r3, r2
 8000b22:	717b      	strb	r3, [r7, #5]
	/*
	 *  Removed as loop check it
	 *	if ((width == 0) | (height == 0))
	 *		return;
	 */
	uint8_t data = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
	uint8_t xbit = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73bb      	strb	r3, [r7, #14]
	uint8_t w; //= width;
	uint8_t x;
	data = *image++;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	603a      	str	r2, [r7, #0]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	73fb      	strb	r3, [r7, #15]
	while (height > 0)
 8000b36:	e02e      	b.n	8000b96 <ssd1306_Draw_Bitmap+0x88>
	{
		w = width;
 8000b38:	797b      	ldrb	r3, [r7, #5]
 8000b3a:	737b      	strb	r3, [r7, #13]
		x = x_start;
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	733b      	strb	r3, [r7, #12]
		while (w > 0)
 8000b40:	e020      	b.n	8000b84 <ssd1306_Draw_Bitmap+0x76>
		{
			ssd1306_Draw_Pixel(x++, y_start,
 8000b42:	7b3b      	ldrb	r3, [r7, #12]
 8000b44:	1c5a      	adds	r2, r3, #1
 8000b46:	733a      	strb	r2, [r7, #12]
					((data & (1 << 7)) ?
 8000b48:	f997 200f 	ldrsb.w	r2, [r7, #15]
			ssd1306_Draw_Pixel(x++, y_start,
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	da01      	bge.n	8000b54 <ssd1306_Draw_Bitmap+0x46>
 8000b50:	22ff      	movs	r2, #255	; 0xff
 8000b52:	e000      	b.n	8000b56 <ssd1306_Draw_Bitmap+0x48>
 8000b54:	2200      	movs	r2, #0
 8000b56:	79b9      	ldrb	r1, [r7, #6]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fd19 	bl	8000590 <ssd1306_Draw_Pixel>
							ssd1306_color_White : ssd1306_color_Black));
			data <<= 1;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
			xbit++;
 8000b64:	7bbb      	ldrb	r3, [r7, #14]
 8000b66:	3301      	adds	r3, #1
 8000b68:	73bb      	strb	r3, [r7, #14]
			if (xbit > 7)
 8000b6a:	7bbb      	ldrb	r3, [r7, #14]
 8000b6c:	2b07      	cmp	r3, #7
 8000b6e:	d906      	bls.n	8000b7e <ssd1306_Draw_Bitmap+0x70>
			{
				xbit = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73bb      	strb	r3, [r7, #14]
				data = *image++;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	603a      	str	r2, [r7, #0]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	73fb      	strb	r3, [r7, #15]
			}
			w--;
 8000b7e:	7b7b      	ldrb	r3, [r7, #13]
 8000b80:	3b01      	subs	r3, #1
 8000b82:	737b      	strb	r3, [r7, #13]
		while (w > 0)
 8000b84:	7b7b      	ldrb	r3, [r7, #13]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d1db      	bne.n	8000b42 <ssd1306_Draw_Bitmap+0x34>
		}
		y_start++;
 8000b8a:	79bb      	ldrb	r3, [r7, #6]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	71bb      	strb	r3, [r7, #6]
		height--;
 8000b90:	7e3b      	ldrb	r3, [r7, #24]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	763b      	strb	r3, [r7, #24]
	while (height > 0)
 8000b96:	7e3b      	ldrb	r3, [r7, #24]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1cd      	bne.n	8000b38 <ssd1306_Draw_Bitmap+0x2a>
	}
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <__io_putchar>:

void delay(void);
void delay2(void);

int __io_putchar(int ch)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
	uart_Send((unsigned char) (ch & 0xFF));
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fb6a 	bl	800128c <uart_Send>
	return ch;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <main>:

int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af02      	add	r7, sp, #8
	/*Initialize LED pin*/
	led_Init();
 8000bca:	f7ff fb9d 	bl	8000308 <led_Init>
	/*Initialize USART1*/
	uart_TX_Init();
 8000bce:	f000 fb2d 	bl	800122c <uart_TX_Init>
	/*Initialize I2C1*/
	i2c1_Init();
 8000bd2:	f7ff faed 	bl	80001b0 <i2c1_Init>

	/*Make Indication the code is live*/
	/*Start Toggling some LEDs*/
	red_On();
 8000bd6:	f7ff fbb7 	bl	8000348 <red_On>
	green_On();
 8000bda:	f7ff fbd1 	bl	8000380 <green_On>
	delay();
 8000bde:	f000 f873 	bl	8000cc8 <delay>
	green_Off();
 8000be2:	f7ff fbdb 	bl	800039c <green_Off>
	delay();
 8000be6:	f000 f86f 	bl	8000cc8 <delay>

	/*Initialize OLED display SSD1306*/
	ssd1306_I2C_Init();
 8000bea:	f7ff fc01 	bl	80003f0 <ssd1306_I2C_Init>

	/*Test the USART and printf function*/
	printf("Hello, From STM32F301C8 MCU\n\r");
 8000bee:	4833      	ldr	r0, [pc, #204]	; (8000cbc <main+0xf8>)
 8000bf0:	f000 fbbe 	bl	8001370 <iprintf>
	blue_On();
 8000bf4:	f7ff fbe0 	bl	80003b8 <blue_On>
	delay();
 8000bf8:	f000 f866 	bl	8000cc8 <delay>
	ssd1306_I2C_Set();
 8000bfc:	f7ff fc92 	bl	8000524 <ssd1306_I2C_Set>
	delay();
 8000c00:	f000 f862 	bl	8000cc8 <delay>

	ssd1306_I2C_Clear();
 8000c04:	f7ff fc58 	bl	80004b8 <ssd1306_I2C_Clear>
	blue_Off();
 8000c08:	f7ff fbe4 	bl	80003d4 <blue_Off>

	while (1)
	{
		uart_Send('H');
 8000c0c:	2048      	movs	r0, #72	; 0x48
 8000c0e:	f000 fb3d 	bl	800128c <uart_Send>
		uart_Send('e');
 8000c12:	2065      	movs	r0, #101	; 0x65
 8000c14:	f000 fb3a 	bl	800128c <uart_Send>
		uart_Send('l');
 8000c18:	206c      	movs	r0, #108	; 0x6c
 8000c1a:	f000 fb37 	bl	800128c <uart_Send>
		uart_Send('l');
 8000c1e:	206c      	movs	r0, #108	; 0x6c
 8000c20:	f000 fb34 	bl	800128c <uart_Send>
		uart_Send('o');
 8000c24:	206f      	movs	r0, #111	; 0x6f
 8000c26:	f000 fb31 	bl	800128c <uart_Send>
		uart_Send('!');
 8000c2a:	2021      	movs	r0, #33	; 0x21
 8000c2c:	f000 fb2e 	bl	800128c <uart_Send>
		uart_Send('\r');
 8000c30:	200d      	movs	r0, #13
 8000c32:	f000 fb2b 	bl	800128c <uart_Send>
		delay();
 8000c36:	f000 f847 	bl	8000cc8 <delay>
		green_Off();
 8000c3a:	f7ff fbaf 	bl	800039c <green_Off>
		red_Off();
 8000c3e:	f7ff fb91 	bl	8000364 <red_Off>
		blue_Off();
 8000c42:	f7ff fbc7 	bl	80003d4 <blue_Off>
		/* SSD1306 Testing */

//		SSD1306_CLEAR_FRAME;
		ssd1306_Draw_Bitmap(0, 0, peugeot, 64, 64);
 8000c46:	2340      	movs	r3, #64	; 0x40
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2340      	movs	r3, #64	; 0x40
 8000c4c:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <main+0xfc>)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff ff5c 	bl	8000b0e <ssd1306_Draw_Bitmap>
//		ssd1306_Draw_Bitmap2(64, 0, peugeot, 64, 64);
		ssd1306_I2C_Write_Frame();
 8000c56:	f7ff fbe9 	bl	800042c <ssd1306_I2C_Write_Frame>
		delay();
 8000c5a:	f000 f835 	bl	8000cc8 <delay>
		delay();
 8000c5e:	f000 f833 	bl	8000cc8 <delay>
		delay();
 8000c62:	f000 f831 	bl	8000cc8 <delay>

		SSD1306_CLEAR_FRAME;
 8000c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <main+0x100>)
 8000c6e:	f000 fb77 	bl	8001360 <memset>
//		ssd1306_Test_Draw_Line_V_1();

//		delay2();
//		ssd1306_Test_Draw_Line_V_1_1();
//		delay2();
		ssd1306_Test_Draw_Line_V_2();
 8000c72:	f000 f8b5 	bl	8000de0 <ssd1306_Test_Draw_Line_V_2>
		delay2();
 8000c76:	f000 f83d 	bl	8000cf4 <delay2>
		ssd1306_Test_Draw_Line_H_3();
 8000c7a:	f000 f857 	bl	8000d2c <ssd1306_Test_Draw_Line_H_3>
		delay2();
 8000c7e:	f000 f839 	bl	8000cf4 <delay2>
		ssd1306_Test_Lines();
 8000c82:	f000 f8ff 	bl	8000e84 <ssd1306_Test_Lines>
		delay();
 8000c86:	f000 f81f 	bl	8000cc8 <delay>
		ssd1306_Test_Rect();
 8000c8a:	f000 f97f 	bl	8000f8c <ssd1306_Test_Rect>
		delay();
 8000c8e:	f000 f81b 	bl	8000cc8 <delay>
		ssd1306_Test_Filled_Rect();
 8000c92:	f000 f9f7 	bl	8001084 <ssd1306_Test_Filled_Rect>
		delay();
 8000c96:	f000 f817 	bl	8000cc8 <delay>
//		SSD1306_CLEAR_FRAME;

//		delay();

		ssd1306_I2C_Clear();
 8000c9a:	f7ff fc0d 	bl	80004b8 <ssd1306_I2C_Clear>
		/* End of SSD1306 Testing*/

		delay();
 8000c9e:	f000 f813 	bl	8000cc8 <delay>
		delay();
 8000ca2:	f000 f811 	bl	8000cc8 <delay>
//		delay();
		blue_On();
 8000ca6:	f7ff fb87 	bl	80003b8 <blue_On>
		green_On();
 8000caa:	f7ff fb69 	bl	8000380 <green_On>
//		i2c1_End();
		green_Off();
 8000cae:	f7ff fb75 	bl	800039c <green_Off>
		red_Off();
 8000cb2:	f7ff fb57 	bl	8000364 <red_Off>
		blue_Off();
 8000cb6:	f7ff fb8d 	bl	80003d4 <blue_Off>
		uart_Send('H');
 8000cba:	e7a7      	b.n	8000c0c <main+0x48>
 8000cbc:	080022b0 	.word	0x080022b0
 8000cc0:	080022f0 	.word	0x080022f0
 8000cc4:	20000080 	.word	0x20000080

08000cc8 <delay>:
	}
	return 0;
}

void delay(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
	for (volatile int i = 0; i < 900000; i++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	e002      	b.n	8000cda <delay+0x12>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <delay+0x28>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	ddf8      	ble.n	8000cd4 <delay+0xc>
		;
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	000dbb9f 	.word	0x000dbb9f

08000cf4 <delay2>:

void delay2(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
	for (volatile int i = 0; i < 90000; i++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	e002      	b.n	8000d06 <delay2+0x12>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3301      	adds	r3, #1
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <delay2+0x28>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	ddf8      	ble.n	8000d00 <delay2+0xc>
		;
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	00015f8f 	.word	0x00015f8f

08000d20 <delay4>:
	for (volatile int i = 0; i < 10000; i++)
		;
}

void delay4(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <ssd1306_Test_Draw_Line_H_3>:
	ssd1306_I2C_Write_Frame();
	delay();
}

void ssd1306_Test_Draw_Line_H_3(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
	uint8_t x = 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 1;
 8000d36:	2301      	movs	r3, #1
 8000d38:	71bb      	strb	r3, [r7, #6]
	uint8_t offset = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	717b      	strb	r3, [r7, #5]
	SSD1306_CLEAR_FRAME;
 8000d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d42:	2100      	movs	r1, #0
 8000d44:	4825      	ldr	r0, [pc, #148]	; (8000ddc <ssd1306_Test_Draw_Line_H_3+0xb0>)
 8000d46:	f000 fb0b 	bl	8001360 <memset>
	ssd1306_Draw_Line_H(0, 0, 28, ssd1306_color_White);
 8000d4a:	23ff      	movs	r3, #255	; 0xff
 8000d4c:	221c      	movs	r2, #28
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fc6d 	bl	8000630 <ssd1306_Draw_Line_H>

	for (uint8_t h = 1; h < 20; h++)
 8000d56:	2301      	movs	r3, #1
 8000d58:	713b      	strb	r3, [r7, #4]
 8000d5a:	e035      	b.n	8000dc8 <ssd1306_Test_Draw_Line_H_3+0x9c>
	{
		x++;
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	71fb      	strb	r3, [r7, #7]
		for (y = 0; y < 9; y++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	71bb      	strb	r3, [r7, #6]
 8000d66:	e01d      	b.n	8000da4 <ssd1306_Test_Draw_Line_H_3+0x78>
		{
			ssd1306_Draw_Line_H(y + offset, x++, h, ssd1306_color_White);
 8000d68:	79ba      	ldrb	r2, [r7, #6]
 8000d6a:	797b      	ldrb	r3, [r7, #5]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b2d8      	uxtb	r0, r3
 8000d70:	79f9      	ldrb	r1, [r7, #7]
 8000d72:	1c4b      	adds	r3, r1, #1
 8000d74:	71fb      	strb	r3, [r7, #7]
 8000d76:	793a      	ldrb	r2, [r7, #4]
 8000d78:	23ff      	movs	r3, #255	; 0xff
 8000d7a:	f7ff fc59 	bl	8000630 <ssd1306_Draw_Line_H>
//				delay2();
			if (x >= (64 - 7))
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b38      	cmp	r3, #56	; 0x38
 8000d82:	d90c      	bls.n	8000d9e <ssd1306_Test_Draw_Line_H_3+0x72>
			{
				x = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	71fb      	strb	r3, [r7, #7]
				offset += 31;
 8000d88:	797b      	ldrb	r3, [r7, #5]
 8000d8a:	331f      	adds	r3, #31
 8000d8c:	717b      	strb	r3, [r7, #5]
				ssd1306_Draw_Line_V(offset - 2, 0, 64, ssd1306_color_White);
 8000d8e:	797b      	ldrb	r3, [r7, #5]
 8000d90:	3b02      	subs	r3, #2
 8000d92:	b2d8      	uxtb	r0, r3
 8000d94:	23ff      	movs	r3, #255	; 0xff
 8000d96:	2240      	movs	r2, #64	; 0x40
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f7ff fcab 	bl	80006f4 <ssd1306_Draw_Line_V>
		for (y = 0; y < 9; y++)
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	3301      	adds	r3, #1
 8000da2:	71bb      	strb	r3, [r7, #6]
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d9de      	bls.n	8000d68 <ssd1306_Test_Draw_Line_H_3+0x3c>
			}
		}
		x++;
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	3301      	adds	r3, #1
 8000dae:	71fb      	strb	r3, [r7, #7]

		ssd1306_Draw_Line_H(offset, x, 28, ssd1306_color_White);
 8000db0:	79f9      	ldrb	r1, [r7, #7]
 8000db2:	7978      	ldrb	r0, [r7, #5]
 8000db4:	23ff      	movs	r3, #255	; 0xff
 8000db6:	221c      	movs	r2, #28
 8000db8:	f7ff fc3a 	bl	8000630 <ssd1306_Draw_Line_H>
		x++;
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t h = 1; h < 20; h++)
 8000dc2:	793b      	ldrb	r3, [r7, #4]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	713b      	strb	r3, [r7, #4]
 8000dc8:	793b      	ldrb	r3, [r7, #4]
 8000dca:	2b13      	cmp	r3, #19
 8000dcc:	d9c6      	bls.n	8000d5c <ssd1306_Test_Draw_Line_H_3+0x30>

	}
	ssd1306_I2C_Write_Frame();
 8000dce:	f7ff fb2d 	bl	800042c <ssd1306_I2C_Write_Frame>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000080 	.word	0x20000080

08000de0 <ssd1306_Test_Draw_Line_V_2>:
	ssd1306_I2C_Write_Frame();
	delay();
}

void ssd1306_Test_Draw_Line_V_2(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
	uint8_t x = 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	71bb      	strb	r3, [r7, #6]
	uint8_t offset = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	717b      	strb	r3, [r7, #5]
	SSD1306_CLEAR_FRAME;
 8000df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df6:	2100      	movs	r1, #0
 8000df8:	4821      	ldr	r0, [pc, #132]	; (8000e80 <ssd1306_Test_Draw_Line_V_2+0xa0>)
 8000dfa:	f000 fab1 	bl	8001360 <memset>
	ssd1306_Draw_Line_V(0, 0, 30, ssd1306_color_White);
 8000dfe:	23ff      	movs	r3, #255	; 0xff
 8000e00:	221e      	movs	r2, #30
 8000e02:	2100      	movs	r1, #0
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff fc75 	bl	80006f4 <ssd1306_Draw_Line_V>
	for (uint8_t h = 1; h < 20; h++)
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	713b      	strb	r3, [r7, #4]
 8000e0e:	e02d      	b.n	8000e6c <ssd1306_Test_Draw_Line_V_2+0x8c>
	{
		x++;
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	3301      	adds	r3, #1
 8000e14:	71fb      	strb	r3, [r7, #7]
		for (y = 1; y < 9; y++)
 8000e16:	2301      	movs	r3, #1
 8000e18:	71bb      	strb	r3, [r7, #6]
 8000e1a:	e015      	b.n	8000e48 <ssd1306_Test_Draw_Line_V_2+0x68>
		{
			ssd1306_Draw_Line_V(x++, y + offset, h, ssd1306_color_White);
 8000e1c:	79f8      	ldrb	r0, [r7, #7]
 8000e1e:	1c43      	adds	r3, r0, #1
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	79ba      	ldrb	r2, [r7, #6]
 8000e24:	797b      	ldrb	r3, [r7, #5]
 8000e26:	4413      	add	r3, r2
 8000e28:	b2d9      	uxtb	r1, r3
 8000e2a:	793a      	ldrb	r2, [r7, #4]
 8000e2c:	23ff      	movs	r3, #255	; 0xff
 8000e2e:	f7ff fc61 	bl	80006f4 <ssd1306_Draw_Line_V>
			//				ssd1306_I2C_Write_Frame();
			//				delay2();
			if (x >= (127 - 7))
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b77      	cmp	r3, #119	; 0x77
 8000e36:	d904      	bls.n	8000e42 <ssd1306_Test_Draw_Line_V_2+0x62>
			{
				x = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	71fb      	strb	r3, [r7, #7]
				offset += 32;
 8000e3c:	797b      	ldrb	r3, [r7, #5]
 8000e3e:	3320      	adds	r3, #32
 8000e40:	717b      	strb	r3, [r7, #5]
		for (y = 1; y < 9; y++)
 8000e42:	79bb      	ldrb	r3, [r7, #6]
 8000e44:	3301      	adds	r3, #1
 8000e46:	71bb      	strb	r3, [r7, #6]
 8000e48:	79bb      	ldrb	r3, [r7, #6]
 8000e4a:	2b08      	cmp	r3, #8
 8000e4c:	d9e6      	bls.n	8000e1c <ssd1306_Test_Draw_Line_V_2+0x3c>
			}
		}

		ssd1306_Draw_Line_V(++x, offset, 30, ssd1306_color_White);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	3301      	adds	r3, #1
 8000e52:	71fb      	strb	r3, [r7, #7]
 8000e54:	7979      	ldrb	r1, [r7, #5]
 8000e56:	79f8      	ldrb	r0, [r7, #7]
 8000e58:	23ff      	movs	r3, #255	; 0xff
 8000e5a:	221e      	movs	r2, #30
 8000e5c:	f7ff fc4a 	bl	80006f4 <ssd1306_Draw_Line_V>
		x++;
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	3301      	adds	r3, #1
 8000e64:	71fb      	strb	r3, [r7, #7]
	for (uint8_t h = 1; h < 20; h++)
 8000e66:	793b      	ldrb	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	713b      	strb	r3, [r7, #4]
 8000e6c:	793b      	ldrb	r3, [r7, #4]
 8000e6e:	2b13      	cmp	r3, #19
 8000e70:	d9ce      	bls.n	8000e10 <ssd1306_Test_Draw_Line_V_2+0x30>

	}
	ssd1306_I2C_Write_Frame();
 8000e72:	f7ff fadb 	bl	800042c <ssd1306_I2C_Write_Frame>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000080 	.word	0x20000080

08000e84 <ssd1306_Test_Lines>:
	//		delay4();
	//	}

}
void ssd1306_Test_Lines()
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af02      	add	r7, sp, #8
	uint8_t x1, y1, x2, y2;

	SSD1306_CLEAR_FRAME;
 8000e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e8e:	2100      	movs	r1, #0
 8000e90:	483d      	ldr	r0, [pc, #244]	; (8000f88 <ssd1306_Test_Lines+0x104>)
 8000e92:	f000 fa65 	bl	8001360 <memset>
	ssd1306_I2C_Write_Frame();
 8000e96:	f7ff fac9 	bl	800042c <ssd1306_I2C_Write_Frame>
	ssd1306_Draw_Direct_Rectangle(18, 8, 110, 56, ssd1306_color_White);
 8000e9a:	23ff      	movs	r3, #255	; 0xff
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2338      	movs	r3, #56	; 0x38
 8000ea0:	226e      	movs	r2, #110	; 0x6e
 8000ea2:	2108      	movs	r1, #8
 8000ea4:	2012      	movs	r0, #18
 8000ea6:	f7ff fd84 	bl	80009b2 <ssd1306_Draw_Direct_Rectangle>
	ssd1306_I2C_Write_Frame();
 8000eaa:	f7ff fabf 	bl	800042c <ssd1306_I2C_Write_Frame>

	x1 = SSD1306_Display_Width / 2;
 8000eae:	2340      	movs	r3, #64	; 0x40
 8000eb0:	717b      	strb	r3, [r7, #5]
	y1 = SSD1306_Display_Height / 2;
 8000eb2:	2320      	movs	r3, #32
 8000eb4:	713b      	strb	r3, [r7, #4]
	y2 = 10;
 8000eb6:	230a      	movs	r3, #10
 8000eb8:	71bb      	strb	r3, [r7, #6]
	for (x2 = 20; x2 <= (SSD1306_Display_Width - 20); x2 += 4)
 8000eba:	2314      	movs	r3, #20
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	e00e      	b.n	8000ede <ssd1306_Test_Lines+0x5a>
	{
		ssd1306_Draw_Line(x1, y1, x2, y2, ssd1306_color_White);
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	79fa      	ldrb	r2, [r7, #7]
 8000ec4:	7939      	ldrb	r1, [r7, #4]
 8000ec6:	7978      	ldrb	r0, [r7, #5]
 8000ec8:	24ff      	movs	r4, #255	; 0xff
 8000eca:	9400      	str	r4, [sp, #0]
 8000ecc:	f7ff fca2 	bl	8000814 <ssd1306_Draw_Line>
		ssd1306_I2C_Write_Frame();
 8000ed0:	f7ff faac 	bl	800042c <ssd1306_I2C_Write_Frame>
		delay4();
 8000ed4:	f7ff ff24 	bl	8000d20 <delay4>
	for (x2 = 20; x2 <= (SSD1306_Display_Width - 20); x2 += 4)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	3304      	adds	r3, #4
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b6c      	cmp	r3, #108	; 0x6c
 8000ee2:	d9ed      	bls.n	8000ec0 <ssd1306_Test_Lines+0x3c>
	}
	x2 -= 4;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	71fb      	strb	r3, [r7, #7]
	y2 += 4;
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	3304      	adds	r3, #4
 8000eee:	71bb      	strb	r3, [r7, #6]
	for (y2 = 10; y2 <= (SSD1306_Display_Height - 10); y2 += 4)
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	71bb      	strb	r3, [r7, #6]
 8000ef4:	e00e      	b.n	8000f14 <ssd1306_Test_Lines+0x90>
	{
		ssd1306_Draw_Line(x1, y1, x2, y2, ssd1306_color_White);
 8000ef6:	79bb      	ldrb	r3, [r7, #6]
 8000ef8:	79fa      	ldrb	r2, [r7, #7]
 8000efa:	7939      	ldrb	r1, [r7, #4]
 8000efc:	7978      	ldrb	r0, [r7, #5]
 8000efe:	24ff      	movs	r4, #255	; 0xff
 8000f00:	9400      	str	r4, [sp, #0]
 8000f02:	f7ff fc87 	bl	8000814 <ssd1306_Draw_Line>
		ssd1306_I2C_Write_Frame();
 8000f06:	f7ff fa91 	bl	800042c <ssd1306_I2C_Write_Frame>
		delay4();
 8000f0a:	f7ff ff09 	bl	8000d20 <delay4>
	for (y2 = 10; y2 <= (SSD1306_Display_Height - 10); y2 += 4)
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	3304      	adds	r3, #4
 8000f12:	71bb      	strb	r3, [r7, #6]
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	2b36      	cmp	r3, #54	; 0x36
 8000f18:	d9ed      	bls.n	8000ef6 <ssd1306_Test_Lines+0x72>
	}
	y2 -= 4;
 8000f1a:	79bb      	ldrb	r3, [r7, #6]
 8000f1c:	3b04      	subs	r3, #4
 8000f1e:	71bb      	strb	r3, [r7, #6]
	x2 -= 4;
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	3b04      	subs	r3, #4
 8000f24:	71fb      	strb	r3, [r7, #7]
//	x2 = (SSD1306_Display_Width - 20)
	for (; x2 >= 20; x2 -= 4)
 8000f26:	e00e      	b.n	8000f46 <ssd1306_Test_Lines+0xc2>
	{
		ssd1306_Draw_Line(x1, y1, x2, y2, ssd1306_color_White);
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	79fa      	ldrb	r2, [r7, #7]
 8000f2c:	7939      	ldrb	r1, [r7, #4]
 8000f2e:	7978      	ldrb	r0, [r7, #5]
 8000f30:	24ff      	movs	r4, #255	; 0xff
 8000f32:	9400      	str	r4, [sp, #0]
 8000f34:	f7ff fc6e 	bl	8000814 <ssd1306_Draw_Line>
		ssd1306_I2C_Write_Frame();
 8000f38:	f7ff fa78 	bl	800042c <ssd1306_I2C_Write_Frame>
		delay4();
 8000f3c:	f7ff fef0 	bl	8000d20 <delay4>
	for (; x2 >= 20; x2 -= 4)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	3b04      	subs	r3, #4
 8000f44:	71fb      	strb	r3, [r7, #7]
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2b13      	cmp	r3, #19
 8000f4a:	d8ed      	bhi.n	8000f28 <ssd1306_Test_Lines+0xa4>
	}
	x2 += 4;
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	3304      	adds	r3, #4
 8000f50:	71fb      	strb	r3, [r7, #7]
	y2 -= 4;
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	3b04      	subs	r3, #4
 8000f56:	71bb      	strb	r3, [r7, #6]
//	y2 = (SSD1306_Display_Height - 10)
	for (; y2 >= 10; y2 -= 4)
 8000f58:	e00e      	b.n	8000f78 <ssd1306_Test_Lines+0xf4>
	{
		ssd1306_Draw_Line(x1, y1, x2, y2, ssd1306_color_White);
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	79fa      	ldrb	r2, [r7, #7]
 8000f5e:	7939      	ldrb	r1, [r7, #4]
 8000f60:	7978      	ldrb	r0, [r7, #5]
 8000f62:	24ff      	movs	r4, #255	; 0xff
 8000f64:	9400      	str	r4, [sp, #0]
 8000f66:	f7ff fc55 	bl	8000814 <ssd1306_Draw_Line>
		ssd1306_I2C_Write_Frame();
 8000f6a:	f7ff fa5f 	bl	800042c <ssd1306_I2C_Write_Frame>
		delay4();
 8000f6e:	f7ff fed7 	bl	8000d20 <delay4>
	for (; y2 >= 10; y2 -= 4)
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	3b04      	subs	r3, #4
 8000f76:	71bb      	strb	r3, [r7, #6]
 8000f78:	79bb      	ldrb	r3, [r7, #6]
 8000f7a:	2b09      	cmp	r3, #9
 8000f7c:	d8ed      	bhi.n	8000f5a <ssd1306_Test_Lines+0xd6>
	}

}
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd90      	pop	{r4, r7, pc}
 8000f88:	20000080 	.word	0x20000080

08000f8c <ssd1306_Test_Rect>:
void ssd1306_Test_Rect()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af02      	add	r7, sp, #8
	SSD1306_CLEAR_FRAME;
 8000f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f96:	2100      	movs	r1, #0
 8000f98:	4838      	ldr	r0, [pc, #224]	; (800107c <ssd1306_Test_Rect+0xf0>)
 8000f9a:	f000 f9e1 	bl	8001360 <memset>
	ssd1306_I2C_Write_Frame();
 8000f9e:	f7ff fa45 	bl	800042c <ssd1306_I2C_Write_Frame>
	ssd1306_Draw_Direct_Rectangle(16, 8, 80, 40, ssd1306_color_White);
 8000fa2:	23ff      	movs	r3, #255	; 0xff
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2328      	movs	r3, #40	; 0x28
 8000fa8:	2250      	movs	r2, #80	; 0x50
 8000faa:	2108      	movs	r1, #8
 8000fac:	2010      	movs	r0, #16
 8000fae:	f7ff fd00 	bl	80009b2 <ssd1306_Draw_Direct_Rectangle>
	ssd1306_I2C_Write_Frame();
 8000fb2:	f7ff fa3b 	bl	800042c <ssd1306_I2C_Write_Frame>
	delay2();
 8000fb6:	f7ff fe9d 	bl	8000cf4 <delay2>
	ssd1306_Draw_Direct_Rectangle(0, 0, 63, 31, ssd1306_color_White);
 8000fba:	23ff      	movs	r3, #255	; 0xff
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	231f      	movs	r3, #31
 8000fc0:	223f      	movs	r2, #63	; 0x3f
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff fcf4 	bl	80009b2 <ssd1306_Draw_Direct_Rectangle>
	ssd1306_I2C_Write_Frame();
 8000fca:	f7ff fa2f 	bl	800042c <ssd1306_I2C_Write_Frame>
	delay2();
 8000fce:	f7ff fe91 	bl	8000cf4 <delay2>
	ssd1306_Draw_Direct_Rectangle(63, 31, 130, 80, ssd1306_color_White);
 8000fd2:	23ff      	movs	r3, #255	; 0xff
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2350      	movs	r3, #80	; 0x50
 8000fd8:	2282      	movs	r2, #130	; 0x82
 8000fda:	211f      	movs	r1, #31
 8000fdc:	203f      	movs	r0, #63	; 0x3f
 8000fde:	f7ff fce8 	bl	80009b2 <ssd1306_Draw_Direct_Rectangle>
	ssd1306_I2C_Write_Frame();
 8000fe2:	f7ff fa23 	bl	800042c <ssd1306_I2C_Write_Frame>
	delay2();
 8000fe6:	f7ff fe85 	bl	8000cf4 <delay2>
	ssd1306_Draw_Direct_Rectangle(5, 60, 250, 255, ssd1306_color_White);
 8000fea:	23ff      	movs	r3, #255	; 0xff
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	23ff      	movs	r3, #255	; 0xff
 8000ff0:	22fa      	movs	r2, #250	; 0xfa
 8000ff2:	213c      	movs	r1, #60	; 0x3c
 8000ff4:	2005      	movs	r0, #5
 8000ff6:	f7ff fcdc 	bl	80009b2 <ssd1306_Draw_Direct_Rectangle>
	ssd1306_I2C_Write_Frame();
 8000ffa:	f7ff fa17 	bl	800042c <ssd1306_I2C_Write_Frame>
	delay2();
 8000ffe:	f7ff fe79 	bl	8000cf4 <delay2>
	ssd1306_point p0, p1, p2, p3;
	p0.x_point = 63;
 8001002:	233f      	movs	r3, #63	; 0x3f
 8001004:	753b      	strb	r3, [r7, #20]
	p0.y_point = 10;
 8001006:	230a      	movs	r3, #10
 8001008:	757b      	strb	r3, [r7, #21]
	p1.x_point = 20;
 800100a:	2314      	movs	r3, #20
 800100c:	743b      	strb	r3, [r7, #16]
	p1.y_point = 31;
 800100e:	231f      	movs	r3, #31
 8001010:	747b      	strb	r3, [r7, #17]
	p2.x_point = 63;
 8001012:	233f      	movs	r3, #63	; 0x3f
 8001014:	733b      	strb	r3, [r7, #12]
	p2.y_point = 53;
 8001016:	2335      	movs	r3, #53	; 0x35
 8001018:	737b      	strb	r3, [r7, #13]
	p3.x_point = 108;
 800101a:	236c      	movs	r3, #108	; 0x6c
 800101c:	723b      	strb	r3, [r7, #8]
	p3.y_point = 31;
 800101e:	231f      	movs	r3, #31
 8001020:	727b      	strb	r3, [r7, #9]

	ssd1306_Draw_Rectangle(p0, p1, p2, p3, ssd1306_color_White);
 8001022:	23ff      	movs	r3, #255	; 0xff
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	6939      	ldr	r1, [r7, #16]
 800102c:	6978      	ldr	r0, [r7, #20]
 800102e:	f7ff fd3b 	bl	8000aa8 <ssd1306_Draw_Rectangle>
	ssd1306_I2C_Write_Frame();
 8001032:	f7ff f9fb 	bl	800042c <ssd1306_I2C_Write_Frame>

	volatile double tt = sqrt(121);
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <ssd1306_Test_Rect+0xf4>)
 800103c:	e9c7 2300 	strd	r2, r3, [r7]

	p0.x_point = (uint8_t) tt;
 8001040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff f892 	bl	8000170 <__aeabi_d2uiz>
 800104c:	4603      	mov	r3, r0
 800104e:	b2db      	uxtb	r3, r3
 8001050:	753b      	strb	r3, [r7, #20]
	p0.y_point = (uint8_t) tt;
 8001052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff f889 	bl	8000170 <__aeabi_d2uiz>
 800105e:	4603      	mov	r3, r0
 8001060:	b2db      	uxtb	r3, r3
 8001062:	757b      	strb	r3, [r7, #21]
	ssd1306_Draw_Rectangle(p0, p1, p2, p3, ssd1306_color_White);
 8001064:	23ff      	movs	r3, #255	; 0xff
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	6939      	ldr	r1, [r7, #16]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff fd1a 	bl	8000aa8 <ssd1306_Draw_Rectangle>

}
 8001074:	bf00      	nop
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000080 	.word	0x20000080
 8001080:	40260000 	.word	0x40260000

08001084 <ssd1306_Test_Filled_Rect>:

void ssd1306_Test_Filled_Rect()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af02      	add	r7, sp, #8
	SSD1306_CLEAR_FRAME;
 800108a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800108e:	2100      	movs	r1, #0
 8001090:	4815      	ldr	r0, [pc, #84]	; (80010e8 <ssd1306_Test_Filled_Rect+0x64>)
 8001092:	f000 f965 	bl	8001360 <memset>
	ssd1306_I2C_Write_Frame();
 8001096:	f7ff f9c9 	bl	800042c <ssd1306_I2C_Write_Frame>
	ssd1306_Draw_Recangle_Filled(20, 10, 64, 55, ssd1306_color_White);
 800109a:	23ff      	movs	r3, #255	; 0xff
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2337      	movs	r3, #55	; 0x37
 80010a0:	2240      	movs	r2, #64	; 0x40
 80010a2:	210a      	movs	r1, #10
 80010a4:	2014      	movs	r0, #20
 80010a6:	f7ff fcbb 	bl	8000a20 <ssd1306_Draw_Recangle_Filled>
	ssd1306_I2C_Write_Frame();
 80010aa:	f7ff f9bf 	bl	800042c <ssd1306_I2C_Write_Frame>
	delay();
 80010ae:	f7ff fe0b 	bl	8000cc8 <delay>
	ssd1306_Draw_Recangle_Filled(66, 5, 255, 120, ssd1306_color_White);
 80010b2:	23ff      	movs	r3, #255	; 0xff
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2378      	movs	r3, #120	; 0x78
 80010b8:	22ff      	movs	r2, #255	; 0xff
 80010ba:	2105      	movs	r1, #5
 80010bc:	2042      	movs	r0, #66	; 0x42
 80010be:	f7ff fcaf 	bl	8000a20 <ssd1306_Draw_Recangle_Filled>
	ssd1306_I2C_Write_Frame();
 80010c2:	f7ff f9b3 	bl	800042c <ssd1306_I2C_Write_Frame>
	delay();
 80010c6:	f7ff fdff 	bl	8000cc8 <delay>
	ssd1306_Draw_Recangle_Filled(127, 64, 0, 0, ssd1306_color_White);
 80010ca:	23ff      	movs	r3, #255	; 0xff
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2300      	movs	r3, #0
 80010d0:	2200      	movs	r2, #0
 80010d2:	2140      	movs	r1, #64	; 0x40
 80010d4:	207f      	movs	r0, #127	; 0x7f
 80010d6:	f7ff fca3 	bl	8000a20 <ssd1306_Draw_Recangle_Filled>
	ssd1306_I2C_Write_Frame();
 80010da:	f7ff f9a7 	bl	800042c <ssd1306_I2C_Write_Frame>
	delay();
 80010de:	f7ff fdf3 	bl	8000cc8 <delay>
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000080 	.word	0x20000080

080010ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	e00a      	b.n	8001114 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010fe:	f3af 8000 	nop.w
 8001102:	4601      	mov	r1, r0
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	60ba      	str	r2, [r7, #8]
 800110a:	b2ca      	uxtb	r2, r1
 800110c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3301      	adds	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	429a      	cmp	r2, r3
 800111a:	dbf0      	blt.n	80010fe <_read+0x12>
	}

return len;
 800111c:	687b      	ldr	r3, [r7, #4]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	e009      	b.n	800114c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	60ba      	str	r2, [r7, #8]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fd30 	bl	8000ba6 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	429a      	cmp	r2, r3
 8001152:	dbf1      	blt.n	8001138 <_write+0x12>
	}
	return len;
 8001154:	687b      	ldr	r3, [r7, #4]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_close>:

int _close(int file)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
	return -1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001184:	605a      	str	r2, [r3, #4]
	return 0;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <_isatty>:

int _isatty(int file)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	return 1;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b085      	sub	sp, #20
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
	return 0;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
	...

080011c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <_sbrk+0x5c>)
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <_sbrk+0x60>)
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <_sbrk+0x64>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <_sbrk+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d207      	bcs.n	8001200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f0:	f000 f88c 	bl	800130c <__errno>
 80011f4:	4603      	mov	r3, r0
 80011f6:	220c      	movs	r2, #12
 80011f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	e009      	b.n	8001214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <_sbrk+0x64>)
 8001210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20005000 	.word	0x20005000
 8001220:	00000400 	.word	0x00000400
 8001224:	20000480 	.word	0x20000480
 8001228:	20000498 	.word	0x20000498

0800122c <uart_TX_Init>:
#include "uart.h"

#define	usart_TX_GPIO_EN	(1U<<2)

void uart_TX_Init(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	/*            Initialize USART1            */

	/*Enable USART1 Clock*/
	RCC->APB2ENR |= (1<<14);
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <uart_TX_Init+0x54>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a12      	ldr	r2, [pc, #72]	; (8001280 <uart_TX_Init+0x54>)
 8001236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123a:	6193      	str	r3, [r2, #24]
	/*Configure Baud rate */
	USART1->BRR = 0x45;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <uart_TX_Init+0x58>)
 800123e:	2245      	movs	r2, #69	; 0x45
 8001240:	609a      	str	r2, [r3, #8]
	/*Clear CR1 Register and Enable TX*/
	USART1->CR1	= USART_CR1_TE;
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <uart_TX_Init+0x58>)
 8001244:	2208      	movs	r2, #8
 8001246:	60da      	str	r2, [r3, #12]
	/*Enable USART1*/
	USART1->CR1 |= USART_CR1_UE;
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <uart_TX_Init+0x58>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <uart_TX_Init+0x58>)
 800124e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001252:	60d3      	str	r3, [r2, #12]

	/*Enable GPIO Port A*/
	RCC->APB2ENR |= usart_TX_GPIO_EN;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <uart_TX_Init+0x54>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a09      	ldr	r2, [pc, #36]	; (8001280 <uart_TX_Init+0x54>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6193      	str	r3, [r2, #24]
	/*Set PA9 as Alternate Function Output push/pull*/
	GPIOA->CRH &= ~(1<<6);
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <uart_TX_Init+0x5c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a08      	ldr	r2, [pc, #32]	; (8001288 <uart_TX_Init+0x5c>)
 8001266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800126a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH	|= ((1<<7) | (1<<5) | (1<<4));
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <uart_TX_Init+0x5c>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4a05      	ldr	r2, [pc, #20]	; (8001288 <uart_TX_Init+0x5c>)
 8001272:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001276:	6053      	str	r3, [r2, #4]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000
 8001284:	40013800 	.word	0x40013800
 8001288:	40010800 	.word	0x40010800

0800128c <uart_Send>:


void uart_Send(unsigned char c)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	while (!(USART1->SR & USART_SR_TC)); //wait for TX to be complete
 8001296:	bf00      	nop
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <uart_Send+0x28>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f9      	beq.n	8001298 <uart_Send+0xc>
	USART1->DR = c;  //send it back out
 80012a4:	4a03      	ldr	r2, [pc, #12]	; (80012b4 <uart_Send+0x28>)
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	6053      	str	r3, [r2, #4]

}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	40013800 	.word	0x40013800

080012b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012b8:	480d      	ldr	r0, [pc, #52]	; (80012f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	; (80012f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <LoopForever+0xe>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	; (8001304 <LoopForever+0x16>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012e6:	f000 f817 	bl	8001318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ea:	f7ff fc6b 	bl	8000bc4 <main>

080012ee <LoopForever>:

LoopForever:
    b LoopForever
 80012ee:	e7fe      	b.n	80012ee <LoopForever>
  ldr   r0, =_estack
 80012f0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80012fc:	08002590 	.word	0x08002590
  ldr r2, =_sbss
 8001300:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001304:	20000494 	.word	0x20000494

08001308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_2_IRQHandler>
	...

0800130c <__errno>:
 800130c:	4b01      	ldr	r3, [pc, #4]	; (8001314 <__errno+0x8>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000000 	.word	0x20000000

08001318 <__libc_init_array>:
 8001318:	b570      	push	{r4, r5, r6, lr}
 800131a:	2600      	movs	r6, #0
 800131c:	4d0c      	ldr	r5, [pc, #48]	; (8001350 <__libc_init_array+0x38>)
 800131e:	4c0d      	ldr	r4, [pc, #52]	; (8001354 <__libc_init_array+0x3c>)
 8001320:	1b64      	subs	r4, r4, r5
 8001322:	10a4      	asrs	r4, r4, #2
 8001324:	42a6      	cmp	r6, r4
 8001326:	d109      	bne.n	800133c <__libc_init_array+0x24>
 8001328:	f000 ffb6 	bl	8002298 <_init>
 800132c:	2600      	movs	r6, #0
 800132e:	4d0a      	ldr	r5, [pc, #40]	; (8001358 <__libc_init_array+0x40>)
 8001330:	4c0a      	ldr	r4, [pc, #40]	; (800135c <__libc_init_array+0x44>)
 8001332:	1b64      	subs	r4, r4, r5
 8001334:	10a4      	asrs	r4, r4, #2
 8001336:	42a6      	cmp	r6, r4
 8001338:	d105      	bne.n	8001346 <__libc_init_array+0x2e>
 800133a:	bd70      	pop	{r4, r5, r6, pc}
 800133c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001340:	4798      	blx	r3
 8001342:	3601      	adds	r6, #1
 8001344:	e7ee      	b.n	8001324 <__libc_init_array+0xc>
 8001346:	f855 3b04 	ldr.w	r3, [r5], #4
 800134a:	4798      	blx	r3
 800134c:	3601      	adds	r6, #1
 800134e:	e7f2      	b.n	8001336 <__libc_init_array+0x1e>
 8001350:	08002588 	.word	0x08002588
 8001354:	08002588 	.word	0x08002588
 8001358:	08002588 	.word	0x08002588
 800135c:	0800258c 	.word	0x0800258c

08001360 <memset>:
 8001360:	4603      	mov	r3, r0
 8001362:	4402      	add	r2, r0
 8001364:	4293      	cmp	r3, r2
 8001366:	d100      	bne.n	800136a <memset+0xa>
 8001368:	4770      	bx	lr
 800136a:	f803 1b01 	strb.w	r1, [r3], #1
 800136e:	e7f9      	b.n	8001364 <memset+0x4>

08001370 <iprintf>:
 8001370:	b40f      	push	{r0, r1, r2, r3}
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <iprintf+0x2c>)
 8001374:	b513      	push	{r0, r1, r4, lr}
 8001376:	681c      	ldr	r4, [r3, #0]
 8001378:	b124      	cbz	r4, 8001384 <iprintf+0x14>
 800137a:	69a3      	ldr	r3, [r4, #24]
 800137c:	b913      	cbnz	r3, 8001384 <iprintf+0x14>
 800137e:	4620      	mov	r0, r4
 8001380:	f000 f866 	bl	8001450 <__sinit>
 8001384:	ab05      	add	r3, sp, #20
 8001386:	4620      	mov	r0, r4
 8001388:	9a04      	ldr	r2, [sp, #16]
 800138a:	68a1      	ldr	r1, [r4, #8]
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	f000 f9bb 	bl	8001708 <_vfiprintf_r>
 8001392:	b002      	add	sp, #8
 8001394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001398:	b004      	add	sp, #16
 800139a:	4770      	bx	lr
 800139c:	20000000 	.word	0x20000000

080013a0 <std>:
 80013a0:	2300      	movs	r3, #0
 80013a2:	b510      	push	{r4, lr}
 80013a4:	4604      	mov	r4, r0
 80013a6:	e9c0 3300 	strd	r3, r3, [r0]
 80013aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013ae:	6083      	str	r3, [r0, #8]
 80013b0:	8181      	strh	r1, [r0, #12]
 80013b2:	6643      	str	r3, [r0, #100]	; 0x64
 80013b4:	81c2      	strh	r2, [r0, #14]
 80013b6:	6183      	str	r3, [r0, #24]
 80013b8:	4619      	mov	r1, r3
 80013ba:	2208      	movs	r2, #8
 80013bc:	305c      	adds	r0, #92	; 0x5c
 80013be:	f7ff ffcf 	bl	8001360 <memset>
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <std+0x38>)
 80013c4:	6224      	str	r4, [r4, #32]
 80013c6:	6263      	str	r3, [r4, #36]	; 0x24
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <std+0x3c>)
 80013ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <std+0x40>)
 80013ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <std+0x44>)
 80013d2:	6323      	str	r3, [r4, #48]	; 0x30
 80013d4:	bd10      	pop	{r4, pc}
 80013d6:	bf00      	nop
 80013d8:	08001cb5 	.word	0x08001cb5
 80013dc:	08001cd7 	.word	0x08001cd7
 80013e0:	08001d0f 	.word	0x08001d0f
 80013e4:	08001d33 	.word	0x08001d33

080013e8 <_cleanup_r>:
 80013e8:	4901      	ldr	r1, [pc, #4]	; (80013f0 <_cleanup_r+0x8>)
 80013ea:	f000 b8af 	b.w	800154c <_fwalk_reent>
 80013ee:	bf00      	nop
 80013f0:	08002005 	.word	0x08002005

080013f4 <__sfmoreglue>:
 80013f4:	2268      	movs	r2, #104	; 0x68
 80013f6:	b570      	push	{r4, r5, r6, lr}
 80013f8:	1e4d      	subs	r5, r1, #1
 80013fa:	4355      	muls	r5, r2
 80013fc:	460e      	mov	r6, r1
 80013fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001402:	f000 f8e5 	bl	80015d0 <_malloc_r>
 8001406:	4604      	mov	r4, r0
 8001408:	b140      	cbz	r0, 800141c <__sfmoreglue+0x28>
 800140a:	2100      	movs	r1, #0
 800140c:	e9c0 1600 	strd	r1, r6, [r0]
 8001410:	300c      	adds	r0, #12
 8001412:	60a0      	str	r0, [r4, #8]
 8001414:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001418:	f7ff ffa2 	bl	8001360 <memset>
 800141c:	4620      	mov	r0, r4
 800141e:	bd70      	pop	{r4, r5, r6, pc}

08001420 <__sfp_lock_acquire>:
 8001420:	4801      	ldr	r0, [pc, #4]	; (8001428 <__sfp_lock_acquire+0x8>)
 8001422:	f000 b8b3 	b.w	800158c <__retarget_lock_acquire_recursive>
 8001426:	bf00      	nop
 8001428:	20000485 	.word	0x20000485

0800142c <__sfp_lock_release>:
 800142c:	4801      	ldr	r0, [pc, #4]	; (8001434 <__sfp_lock_release+0x8>)
 800142e:	f000 b8ae 	b.w	800158e <__retarget_lock_release_recursive>
 8001432:	bf00      	nop
 8001434:	20000485 	.word	0x20000485

08001438 <__sinit_lock_acquire>:
 8001438:	4801      	ldr	r0, [pc, #4]	; (8001440 <__sinit_lock_acquire+0x8>)
 800143a:	f000 b8a7 	b.w	800158c <__retarget_lock_acquire_recursive>
 800143e:	bf00      	nop
 8001440:	20000486 	.word	0x20000486

08001444 <__sinit_lock_release>:
 8001444:	4801      	ldr	r0, [pc, #4]	; (800144c <__sinit_lock_release+0x8>)
 8001446:	f000 b8a2 	b.w	800158e <__retarget_lock_release_recursive>
 800144a:	bf00      	nop
 800144c:	20000486 	.word	0x20000486

08001450 <__sinit>:
 8001450:	b510      	push	{r4, lr}
 8001452:	4604      	mov	r4, r0
 8001454:	f7ff fff0 	bl	8001438 <__sinit_lock_acquire>
 8001458:	69a3      	ldr	r3, [r4, #24]
 800145a:	b11b      	cbz	r3, 8001464 <__sinit+0x14>
 800145c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001460:	f7ff bff0 	b.w	8001444 <__sinit_lock_release>
 8001464:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001468:	6523      	str	r3, [r4, #80]	; 0x50
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <__sinit+0x68>)
 800146c:	4a13      	ldr	r2, [pc, #76]	; (80014bc <__sinit+0x6c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	62a2      	str	r2, [r4, #40]	; 0x28
 8001472:	42a3      	cmp	r3, r4
 8001474:	bf08      	it	eq
 8001476:	2301      	moveq	r3, #1
 8001478:	4620      	mov	r0, r4
 800147a:	bf08      	it	eq
 800147c:	61a3      	streq	r3, [r4, #24]
 800147e:	f000 f81f 	bl	80014c0 <__sfp>
 8001482:	6060      	str	r0, [r4, #4]
 8001484:	4620      	mov	r0, r4
 8001486:	f000 f81b 	bl	80014c0 <__sfp>
 800148a:	60a0      	str	r0, [r4, #8]
 800148c:	4620      	mov	r0, r4
 800148e:	f000 f817 	bl	80014c0 <__sfp>
 8001492:	2200      	movs	r2, #0
 8001494:	2104      	movs	r1, #4
 8001496:	60e0      	str	r0, [r4, #12]
 8001498:	6860      	ldr	r0, [r4, #4]
 800149a:	f7ff ff81 	bl	80013a0 <std>
 800149e:	2201      	movs	r2, #1
 80014a0:	2109      	movs	r1, #9
 80014a2:	68a0      	ldr	r0, [r4, #8]
 80014a4:	f7ff ff7c 	bl	80013a0 <std>
 80014a8:	2202      	movs	r2, #2
 80014aa:	2112      	movs	r1, #18
 80014ac:	68e0      	ldr	r0, [r4, #12]
 80014ae:	f7ff ff77 	bl	80013a0 <std>
 80014b2:	2301      	movs	r3, #1
 80014b4:	61a3      	str	r3, [r4, #24]
 80014b6:	e7d1      	b.n	800145c <__sinit+0xc>
 80014b8:	080024f0 	.word	0x080024f0
 80014bc:	080013e9 	.word	0x080013e9

080014c0 <__sfp>:
 80014c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c2:	4607      	mov	r7, r0
 80014c4:	f7ff ffac 	bl	8001420 <__sfp_lock_acquire>
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <__sfp+0x84>)
 80014ca:	681e      	ldr	r6, [r3, #0]
 80014cc:	69b3      	ldr	r3, [r6, #24]
 80014ce:	b913      	cbnz	r3, 80014d6 <__sfp+0x16>
 80014d0:	4630      	mov	r0, r6
 80014d2:	f7ff ffbd 	bl	8001450 <__sinit>
 80014d6:	3648      	adds	r6, #72	; 0x48
 80014d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80014dc:	3b01      	subs	r3, #1
 80014de:	d503      	bpl.n	80014e8 <__sfp+0x28>
 80014e0:	6833      	ldr	r3, [r6, #0]
 80014e2:	b30b      	cbz	r3, 8001528 <__sfp+0x68>
 80014e4:	6836      	ldr	r6, [r6, #0]
 80014e6:	e7f7      	b.n	80014d8 <__sfp+0x18>
 80014e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80014ec:	b9d5      	cbnz	r5, 8001524 <__sfp+0x64>
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <__sfp+0x88>)
 80014f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80014f4:	60e3      	str	r3, [r4, #12]
 80014f6:	6665      	str	r5, [r4, #100]	; 0x64
 80014f8:	f000 f847 	bl	800158a <__retarget_lock_init_recursive>
 80014fc:	f7ff ff96 	bl	800142c <__sfp_lock_release>
 8001500:	2208      	movs	r2, #8
 8001502:	4629      	mov	r1, r5
 8001504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800150c:	6025      	str	r5, [r4, #0]
 800150e:	61a5      	str	r5, [r4, #24]
 8001510:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001514:	f7ff ff24 	bl	8001360 <memset>
 8001518:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800151c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001520:	4620      	mov	r0, r4
 8001522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001524:	3468      	adds	r4, #104	; 0x68
 8001526:	e7d9      	b.n	80014dc <__sfp+0x1c>
 8001528:	2104      	movs	r1, #4
 800152a:	4638      	mov	r0, r7
 800152c:	f7ff ff62 	bl	80013f4 <__sfmoreglue>
 8001530:	4604      	mov	r4, r0
 8001532:	6030      	str	r0, [r6, #0]
 8001534:	2800      	cmp	r0, #0
 8001536:	d1d5      	bne.n	80014e4 <__sfp+0x24>
 8001538:	f7ff ff78 	bl	800142c <__sfp_lock_release>
 800153c:	230c      	movs	r3, #12
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	e7ee      	b.n	8001520 <__sfp+0x60>
 8001542:	bf00      	nop
 8001544:	080024f0 	.word	0x080024f0
 8001548:	ffff0001 	.word	0xffff0001

0800154c <_fwalk_reent>:
 800154c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001550:	4606      	mov	r6, r0
 8001552:	4688      	mov	r8, r1
 8001554:	2700      	movs	r7, #0
 8001556:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800155a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800155e:	f1b9 0901 	subs.w	r9, r9, #1
 8001562:	d505      	bpl.n	8001570 <_fwalk_reent+0x24>
 8001564:	6824      	ldr	r4, [r4, #0]
 8001566:	2c00      	cmp	r4, #0
 8001568:	d1f7      	bne.n	800155a <_fwalk_reent+0xe>
 800156a:	4638      	mov	r0, r7
 800156c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001570:	89ab      	ldrh	r3, [r5, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d907      	bls.n	8001586 <_fwalk_reent+0x3a>
 8001576:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800157a:	3301      	adds	r3, #1
 800157c:	d003      	beq.n	8001586 <_fwalk_reent+0x3a>
 800157e:	4629      	mov	r1, r5
 8001580:	4630      	mov	r0, r6
 8001582:	47c0      	blx	r8
 8001584:	4307      	orrs	r7, r0
 8001586:	3568      	adds	r5, #104	; 0x68
 8001588:	e7e9      	b.n	800155e <_fwalk_reent+0x12>

0800158a <__retarget_lock_init_recursive>:
 800158a:	4770      	bx	lr

0800158c <__retarget_lock_acquire_recursive>:
 800158c:	4770      	bx	lr

0800158e <__retarget_lock_release_recursive>:
 800158e:	4770      	bx	lr

08001590 <sbrk_aligned>:
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	4e0e      	ldr	r6, [pc, #56]	; (80015cc <sbrk_aligned+0x3c>)
 8001594:	460c      	mov	r4, r1
 8001596:	6831      	ldr	r1, [r6, #0]
 8001598:	4605      	mov	r5, r0
 800159a:	b911      	cbnz	r1, 80015a2 <sbrk_aligned+0x12>
 800159c:	f000 fb7a 	bl	8001c94 <_sbrk_r>
 80015a0:	6030      	str	r0, [r6, #0]
 80015a2:	4621      	mov	r1, r4
 80015a4:	4628      	mov	r0, r5
 80015a6:	f000 fb75 	bl	8001c94 <_sbrk_r>
 80015aa:	1c43      	adds	r3, r0, #1
 80015ac:	d00a      	beq.n	80015c4 <sbrk_aligned+0x34>
 80015ae:	1cc4      	adds	r4, r0, #3
 80015b0:	f024 0403 	bic.w	r4, r4, #3
 80015b4:	42a0      	cmp	r0, r4
 80015b6:	d007      	beq.n	80015c8 <sbrk_aligned+0x38>
 80015b8:	1a21      	subs	r1, r4, r0
 80015ba:	4628      	mov	r0, r5
 80015bc:	f000 fb6a 	bl	8001c94 <_sbrk_r>
 80015c0:	3001      	adds	r0, #1
 80015c2:	d101      	bne.n	80015c8 <sbrk_aligned+0x38>
 80015c4:	f04f 34ff 	mov.w	r4, #4294967295
 80015c8:	4620      	mov	r0, r4
 80015ca:	bd70      	pop	{r4, r5, r6, pc}
 80015cc:	2000048c 	.word	0x2000048c

080015d0 <_malloc_r>:
 80015d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015d4:	1ccd      	adds	r5, r1, #3
 80015d6:	f025 0503 	bic.w	r5, r5, #3
 80015da:	3508      	adds	r5, #8
 80015dc:	2d0c      	cmp	r5, #12
 80015de:	bf38      	it	cc
 80015e0:	250c      	movcc	r5, #12
 80015e2:	2d00      	cmp	r5, #0
 80015e4:	4607      	mov	r7, r0
 80015e6:	db01      	blt.n	80015ec <_malloc_r+0x1c>
 80015e8:	42a9      	cmp	r1, r5
 80015ea:	d905      	bls.n	80015f8 <_malloc_r+0x28>
 80015ec:	230c      	movs	r3, #12
 80015ee:	2600      	movs	r6, #0
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	4630      	mov	r0, r6
 80015f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015f8:	4e2e      	ldr	r6, [pc, #184]	; (80016b4 <_malloc_r+0xe4>)
 80015fa:	f000 fdc5 	bl	8002188 <__malloc_lock>
 80015fe:	6833      	ldr	r3, [r6, #0]
 8001600:	461c      	mov	r4, r3
 8001602:	bb34      	cbnz	r4, 8001652 <_malloc_r+0x82>
 8001604:	4629      	mov	r1, r5
 8001606:	4638      	mov	r0, r7
 8001608:	f7ff ffc2 	bl	8001590 <sbrk_aligned>
 800160c:	1c43      	adds	r3, r0, #1
 800160e:	4604      	mov	r4, r0
 8001610:	d14d      	bne.n	80016ae <_malloc_r+0xde>
 8001612:	6834      	ldr	r4, [r6, #0]
 8001614:	4626      	mov	r6, r4
 8001616:	2e00      	cmp	r6, #0
 8001618:	d140      	bne.n	800169c <_malloc_r+0xcc>
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	4631      	mov	r1, r6
 800161e:	4638      	mov	r0, r7
 8001620:	eb04 0803 	add.w	r8, r4, r3
 8001624:	f000 fb36 	bl	8001c94 <_sbrk_r>
 8001628:	4580      	cmp	r8, r0
 800162a:	d13a      	bne.n	80016a2 <_malloc_r+0xd2>
 800162c:	6821      	ldr	r1, [r4, #0]
 800162e:	3503      	adds	r5, #3
 8001630:	1a6d      	subs	r5, r5, r1
 8001632:	f025 0503 	bic.w	r5, r5, #3
 8001636:	3508      	adds	r5, #8
 8001638:	2d0c      	cmp	r5, #12
 800163a:	bf38      	it	cc
 800163c:	250c      	movcc	r5, #12
 800163e:	4638      	mov	r0, r7
 8001640:	4629      	mov	r1, r5
 8001642:	f7ff ffa5 	bl	8001590 <sbrk_aligned>
 8001646:	3001      	adds	r0, #1
 8001648:	d02b      	beq.n	80016a2 <_malloc_r+0xd2>
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	442b      	add	r3, r5
 800164e:	6023      	str	r3, [r4, #0]
 8001650:	e00e      	b.n	8001670 <_malloc_r+0xa0>
 8001652:	6822      	ldr	r2, [r4, #0]
 8001654:	1b52      	subs	r2, r2, r5
 8001656:	d41e      	bmi.n	8001696 <_malloc_r+0xc6>
 8001658:	2a0b      	cmp	r2, #11
 800165a:	d916      	bls.n	800168a <_malloc_r+0xba>
 800165c:	1961      	adds	r1, r4, r5
 800165e:	42a3      	cmp	r3, r4
 8001660:	6025      	str	r5, [r4, #0]
 8001662:	bf18      	it	ne
 8001664:	6059      	strne	r1, [r3, #4]
 8001666:	6863      	ldr	r3, [r4, #4]
 8001668:	bf08      	it	eq
 800166a:	6031      	streq	r1, [r6, #0]
 800166c:	5162      	str	r2, [r4, r5]
 800166e:	604b      	str	r3, [r1, #4]
 8001670:	4638      	mov	r0, r7
 8001672:	f104 060b 	add.w	r6, r4, #11
 8001676:	f000 fd8d 	bl	8002194 <__malloc_unlock>
 800167a:	f026 0607 	bic.w	r6, r6, #7
 800167e:	1d23      	adds	r3, r4, #4
 8001680:	1af2      	subs	r2, r6, r3
 8001682:	d0b6      	beq.n	80015f2 <_malloc_r+0x22>
 8001684:	1b9b      	subs	r3, r3, r6
 8001686:	50a3      	str	r3, [r4, r2]
 8001688:	e7b3      	b.n	80015f2 <_malloc_r+0x22>
 800168a:	6862      	ldr	r2, [r4, #4]
 800168c:	42a3      	cmp	r3, r4
 800168e:	bf0c      	ite	eq
 8001690:	6032      	streq	r2, [r6, #0]
 8001692:	605a      	strne	r2, [r3, #4]
 8001694:	e7ec      	b.n	8001670 <_malloc_r+0xa0>
 8001696:	4623      	mov	r3, r4
 8001698:	6864      	ldr	r4, [r4, #4]
 800169a:	e7b2      	b.n	8001602 <_malloc_r+0x32>
 800169c:	4634      	mov	r4, r6
 800169e:	6876      	ldr	r6, [r6, #4]
 80016a0:	e7b9      	b.n	8001616 <_malloc_r+0x46>
 80016a2:	230c      	movs	r3, #12
 80016a4:	4638      	mov	r0, r7
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	f000 fd74 	bl	8002194 <__malloc_unlock>
 80016ac:	e7a1      	b.n	80015f2 <_malloc_r+0x22>
 80016ae:	6025      	str	r5, [r4, #0]
 80016b0:	e7de      	b.n	8001670 <_malloc_r+0xa0>
 80016b2:	bf00      	nop
 80016b4:	20000488 	.word	0x20000488

080016b8 <__sfputc_r>:
 80016b8:	6893      	ldr	r3, [r2, #8]
 80016ba:	b410      	push	{r4}
 80016bc:	3b01      	subs	r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	6093      	str	r3, [r2, #8]
 80016c2:	da07      	bge.n	80016d4 <__sfputc_r+0x1c>
 80016c4:	6994      	ldr	r4, [r2, #24]
 80016c6:	42a3      	cmp	r3, r4
 80016c8:	db01      	blt.n	80016ce <__sfputc_r+0x16>
 80016ca:	290a      	cmp	r1, #10
 80016cc:	d102      	bne.n	80016d4 <__sfputc_r+0x1c>
 80016ce:	bc10      	pop	{r4}
 80016d0:	f000 bb34 	b.w	8001d3c <__swbuf_r>
 80016d4:	6813      	ldr	r3, [r2, #0]
 80016d6:	1c58      	adds	r0, r3, #1
 80016d8:	6010      	str	r0, [r2, #0]
 80016da:	7019      	strb	r1, [r3, #0]
 80016dc:	4608      	mov	r0, r1
 80016de:	bc10      	pop	{r4}
 80016e0:	4770      	bx	lr

080016e2 <__sfputs_r>:
 80016e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e4:	4606      	mov	r6, r0
 80016e6:	460f      	mov	r7, r1
 80016e8:	4614      	mov	r4, r2
 80016ea:	18d5      	adds	r5, r2, r3
 80016ec:	42ac      	cmp	r4, r5
 80016ee:	d101      	bne.n	80016f4 <__sfputs_r+0x12>
 80016f0:	2000      	movs	r0, #0
 80016f2:	e007      	b.n	8001704 <__sfputs_r+0x22>
 80016f4:	463a      	mov	r2, r7
 80016f6:	4630      	mov	r0, r6
 80016f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016fc:	f7ff ffdc 	bl	80016b8 <__sfputc_r>
 8001700:	1c43      	adds	r3, r0, #1
 8001702:	d1f3      	bne.n	80016ec <__sfputs_r+0xa>
 8001704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001708 <_vfiprintf_r>:
 8001708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800170c:	460d      	mov	r5, r1
 800170e:	4614      	mov	r4, r2
 8001710:	4698      	mov	r8, r3
 8001712:	4606      	mov	r6, r0
 8001714:	b09d      	sub	sp, #116	; 0x74
 8001716:	b118      	cbz	r0, 8001720 <_vfiprintf_r+0x18>
 8001718:	6983      	ldr	r3, [r0, #24]
 800171a:	b90b      	cbnz	r3, 8001720 <_vfiprintf_r+0x18>
 800171c:	f7ff fe98 	bl	8001450 <__sinit>
 8001720:	4b89      	ldr	r3, [pc, #548]	; (8001948 <_vfiprintf_r+0x240>)
 8001722:	429d      	cmp	r5, r3
 8001724:	d11b      	bne.n	800175e <_vfiprintf_r+0x56>
 8001726:	6875      	ldr	r5, [r6, #4]
 8001728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800172a:	07d9      	lsls	r1, r3, #31
 800172c:	d405      	bmi.n	800173a <_vfiprintf_r+0x32>
 800172e:	89ab      	ldrh	r3, [r5, #12]
 8001730:	059a      	lsls	r2, r3, #22
 8001732:	d402      	bmi.n	800173a <_vfiprintf_r+0x32>
 8001734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001736:	f7ff ff29 	bl	800158c <__retarget_lock_acquire_recursive>
 800173a:	89ab      	ldrh	r3, [r5, #12]
 800173c:	071b      	lsls	r3, r3, #28
 800173e:	d501      	bpl.n	8001744 <_vfiprintf_r+0x3c>
 8001740:	692b      	ldr	r3, [r5, #16]
 8001742:	b9eb      	cbnz	r3, 8001780 <_vfiprintf_r+0x78>
 8001744:	4629      	mov	r1, r5
 8001746:	4630      	mov	r0, r6
 8001748:	f000 fb5c 	bl	8001e04 <__swsetup_r>
 800174c:	b1c0      	cbz	r0, 8001780 <_vfiprintf_r+0x78>
 800174e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001750:	07dc      	lsls	r4, r3, #31
 8001752:	d50e      	bpl.n	8001772 <_vfiprintf_r+0x6a>
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	b01d      	add	sp, #116	; 0x74
 800175a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800175e:	4b7b      	ldr	r3, [pc, #492]	; (800194c <_vfiprintf_r+0x244>)
 8001760:	429d      	cmp	r5, r3
 8001762:	d101      	bne.n	8001768 <_vfiprintf_r+0x60>
 8001764:	68b5      	ldr	r5, [r6, #8]
 8001766:	e7df      	b.n	8001728 <_vfiprintf_r+0x20>
 8001768:	4b79      	ldr	r3, [pc, #484]	; (8001950 <_vfiprintf_r+0x248>)
 800176a:	429d      	cmp	r5, r3
 800176c:	bf08      	it	eq
 800176e:	68f5      	ldreq	r5, [r6, #12]
 8001770:	e7da      	b.n	8001728 <_vfiprintf_r+0x20>
 8001772:	89ab      	ldrh	r3, [r5, #12]
 8001774:	0598      	lsls	r0, r3, #22
 8001776:	d4ed      	bmi.n	8001754 <_vfiprintf_r+0x4c>
 8001778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800177a:	f7ff ff08 	bl	800158e <__retarget_lock_release_recursive>
 800177e:	e7e9      	b.n	8001754 <_vfiprintf_r+0x4c>
 8001780:	2300      	movs	r3, #0
 8001782:	9309      	str	r3, [sp, #36]	; 0x24
 8001784:	2320      	movs	r3, #32
 8001786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800178a:	2330      	movs	r3, #48	; 0x30
 800178c:	f04f 0901 	mov.w	r9, #1
 8001790:	f8cd 800c 	str.w	r8, [sp, #12]
 8001794:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001954 <_vfiprintf_r+0x24c>
 8001798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800179c:	4623      	mov	r3, r4
 800179e:	469a      	mov	sl, r3
 80017a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017a4:	b10a      	cbz	r2, 80017aa <_vfiprintf_r+0xa2>
 80017a6:	2a25      	cmp	r2, #37	; 0x25
 80017a8:	d1f9      	bne.n	800179e <_vfiprintf_r+0x96>
 80017aa:	ebba 0b04 	subs.w	fp, sl, r4
 80017ae:	d00b      	beq.n	80017c8 <_vfiprintf_r+0xc0>
 80017b0:	465b      	mov	r3, fp
 80017b2:	4622      	mov	r2, r4
 80017b4:	4629      	mov	r1, r5
 80017b6:	4630      	mov	r0, r6
 80017b8:	f7ff ff93 	bl	80016e2 <__sfputs_r>
 80017bc:	3001      	adds	r0, #1
 80017be:	f000 80aa 	beq.w	8001916 <_vfiprintf_r+0x20e>
 80017c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017c4:	445a      	add	r2, fp
 80017c6:	9209      	str	r2, [sp, #36]	; 0x24
 80017c8:	f89a 3000 	ldrb.w	r3, [sl]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a2 	beq.w	8001916 <_vfiprintf_r+0x20e>
 80017d2:	2300      	movs	r3, #0
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017dc:	f10a 0a01 	add.w	sl, sl, #1
 80017e0:	9304      	str	r3, [sp, #16]
 80017e2:	9307      	str	r3, [sp, #28]
 80017e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017e8:	931a      	str	r3, [sp, #104]	; 0x68
 80017ea:	4654      	mov	r4, sl
 80017ec:	2205      	movs	r2, #5
 80017ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017f2:	4858      	ldr	r0, [pc, #352]	; (8001954 <_vfiprintf_r+0x24c>)
 80017f4:	f000 fcba 	bl	800216c <memchr>
 80017f8:	9a04      	ldr	r2, [sp, #16]
 80017fa:	b9d8      	cbnz	r0, 8001834 <_vfiprintf_r+0x12c>
 80017fc:	06d1      	lsls	r1, r2, #27
 80017fe:	bf44      	itt	mi
 8001800:	2320      	movmi	r3, #32
 8001802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001806:	0713      	lsls	r3, r2, #28
 8001808:	bf44      	itt	mi
 800180a:	232b      	movmi	r3, #43	; 0x2b
 800180c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001810:	f89a 3000 	ldrb.w	r3, [sl]
 8001814:	2b2a      	cmp	r3, #42	; 0x2a
 8001816:	d015      	beq.n	8001844 <_vfiprintf_r+0x13c>
 8001818:	4654      	mov	r4, sl
 800181a:	2000      	movs	r0, #0
 800181c:	f04f 0c0a 	mov.w	ip, #10
 8001820:	9a07      	ldr	r2, [sp, #28]
 8001822:	4621      	mov	r1, r4
 8001824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001828:	3b30      	subs	r3, #48	; 0x30
 800182a:	2b09      	cmp	r3, #9
 800182c:	d94e      	bls.n	80018cc <_vfiprintf_r+0x1c4>
 800182e:	b1b0      	cbz	r0, 800185e <_vfiprintf_r+0x156>
 8001830:	9207      	str	r2, [sp, #28]
 8001832:	e014      	b.n	800185e <_vfiprintf_r+0x156>
 8001834:	eba0 0308 	sub.w	r3, r0, r8
 8001838:	fa09 f303 	lsl.w	r3, r9, r3
 800183c:	4313      	orrs	r3, r2
 800183e:	46a2      	mov	sl, r4
 8001840:	9304      	str	r3, [sp, #16]
 8001842:	e7d2      	b.n	80017ea <_vfiprintf_r+0xe2>
 8001844:	9b03      	ldr	r3, [sp, #12]
 8001846:	1d19      	adds	r1, r3, #4
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	9103      	str	r1, [sp, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	bfbb      	ittet	lt
 8001850:	425b      	neglt	r3, r3
 8001852:	f042 0202 	orrlt.w	r2, r2, #2
 8001856:	9307      	strge	r3, [sp, #28]
 8001858:	9307      	strlt	r3, [sp, #28]
 800185a:	bfb8      	it	lt
 800185c:	9204      	strlt	r2, [sp, #16]
 800185e:	7823      	ldrb	r3, [r4, #0]
 8001860:	2b2e      	cmp	r3, #46	; 0x2e
 8001862:	d10c      	bne.n	800187e <_vfiprintf_r+0x176>
 8001864:	7863      	ldrb	r3, [r4, #1]
 8001866:	2b2a      	cmp	r3, #42	; 0x2a
 8001868:	d135      	bne.n	80018d6 <_vfiprintf_r+0x1ce>
 800186a:	9b03      	ldr	r3, [sp, #12]
 800186c:	3402      	adds	r4, #2
 800186e:	1d1a      	adds	r2, r3, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	9203      	str	r2, [sp, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	bfb8      	it	lt
 8001878:	f04f 33ff 	movlt.w	r3, #4294967295
 800187c:	9305      	str	r3, [sp, #20]
 800187e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001958 <_vfiprintf_r+0x250>
 8001882:	2203      	movs	r2, #3
 8001884:	4650      	mov	r0, sl
 8001886:	7821      	ldrb	r1, [r4, #0]
 8001888:	f000 fc70 	bl	800216c <memchr>
 800188c:	b140      	cbz	r0, 80018a0 <_vfiprintf_r+0x198>
 800188e:	2340      	movs	r3, #64	; 0x40
 8001890:	eba0 000a 	sub.w	r0, r0, sl
 8001894:	fa03 f000 	lsl.w	r0, r3, r0
 8001898:	9b04      	ldr	r3, [sp, #16]
 800189a:	3401      	adds	r4, #1
 800189c:	4303      	orrs	r3, r0
 800189e:	9304      	str	r3, [sp, #16]
 80018a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018a4:	2206      	movs	r2, #6
 80018a6:	482d      	ldr	r0, [pc, #180]	; (800195c <_vfiprintf_r+0x254>)
 80018a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018ac:	f000 fc5e 	bl	800216c <memchr>
 80018b0:	2800      	cmp	r0, #0
 80018b2:	d03f      	beq.n	8001934 <_vfiprintf_r+0x22c>
 80018b4:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <_vfiprintf_r+0x258>)
 80018b6:	bb1b      	cbnz	r3, 8001900 <_vfiprintf_r+0x1f8>
 80018b8:	9b03      	ldr	r3, [sp, #12]
 80018ba:	3307      	adds	r3, #7
 80018bc:	f023 0307 	bic.w	r3, r3, #7
 80018c0:	3308      	adds	r3, #8
 80018c2:	9303      	str	r3, [sp, #12]
 80018c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018c6:	443b      	add	r3, r7
 80018c8:	9309      	str	r3, [sp, #36]	; 0x24
 80018ca:	e767      	b.n	800179c <_vfiprintf_r+0x94>
 80018cc:	460c      	mov	r4, r1
 80018ce:	2001      	movs	r0, #1
 80018d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80018d4:	e7a5      	b.n	8001822 <_vfiprintf_r+0x11a>
 80018d6:	2300      	movs	r3, #0
 80018d8:	f04f 0c0a 	mov.w	ip, #10
 80018dc:	4619      	mov	r1, r3
 80018de:	3401      	adds	r4, #1
 80018e0:	9305      	str	r3, [sp, #20]
 80018e2:	4620      	mov	r0, r4
 80018e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018e8:	3a30      	subs	r2, #48	; 0x30
 80018ea:	2a09      	cmp	r2, #9
 80018ec:	d903      	bls.n	80018f6 <_vfiprintf_r+0x1ee>
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0c5      	beq.n	800187e <_vfiprintf_r+0x176>
 80018f2:	9105      	str	r1, [sp, #20]
 80018f4:	e7c3      	b.n	800187e <_vfiprintf_r+0x176>
 80018f6:	4604      	mov	r4, r0
 80018f8:	2301      	movs	r3, #1
 80018fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80018fe:	e7f0      	b.n	80018e2 <_vfiprintf_r+0x1da>
 8001900:	ab03      	add	r3, sp, #12
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	462a      	mov	r2, r5
 8001906:	4630      	mov	r0, r6
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <_vfiprintf_r+0x25c>)
 800190a:	a904      	add	r1, sp, #16
 800190c:	f3af 8000 	nop.w
 8001910:	4607      	mov	r7, r0
 8001912:	1c78      	adds	r0, r7, #1
 8001914:	d1d6      	bne.n	80018c4 <_vfiprintf_r+0x1bc>
 8001916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001918:	07d9      	lsls	r1, r3, #31
 800191a:	d405      	bmi.n	8001928 <_vfiprintf_r+0x220>
 800191c:	89ab      	ldrh	r3, [r5, #12]
 800191e:	059a      	lsls	r2, r3, #22
 8001920:	d402      	bmi.n	8001928 <_vfiprintf_r+0x220>
 8001922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001924:	f7ff fe33 	bl	800158e <__retarget_lock_release_recursive>
 8001928:	89ab      	ldrh	r3, [r5, #12]
 800192a:	065b      	lsls	r3, r3, #25
 800192c:	f53f af12 	bmi.w	8001754 <_vfiprintf_r+0x4c>
 8001930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001932:	e711      	b.n	8001758 <_vfiprintf_r+0x50>
 8001934:	ab03      	add	r3, sp, #12
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	462a      	mov	r2, r5
 800193a:	4630      	mov	r0, r6
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <_vfiprintf_r+0x25c>)
 800193e:	a904      	add	r1, sp, #16
 8001940:	f000 f882 	bl	8001a48 <_printf_i>
 8001944:	e7e4      	b.n	8001910 <_vfiprintf_r+0x208>
 8001946:	bf00      	nop
 8001948:	08002514 	.word	0x08002514
 800194c:	08002534 	.word	0x08002534
 8001950:	080024f4 	.word	0x080024f4
 8001954:	08002554 	.word	0x08002554
 8001958:	0800255a 	.word	0x0800255a
 800195c:	0800255e 	.word	0x0800255e
 8001960:	00000000 	.word	0x00000000
 8001964:	080016e3 	.word	0x080016e3

08001968 <_printf_common>:
 8001968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800196c:	4616      	mov	r6, r2
 800196e:	4699      	mov	r9, r3
 8001970:	688a      	ldr	r2, [r1, #8]
 8001972:	690b      	ldr	r3, [r1, #16]
 8001974:	4607      	mov	r7, r0
 8001976:	4293      	cmp	r3, r2
 8001978:	bfb8      	it	lt
 800197a:	4613      	movlt	r3, r2
 800197c:	6033      	str	r3, [r6, #0]
 800197e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001982:	460c      	mov	r4, r1
 8001984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001988:	b10a      	cbz	r2, 800198e <_printf_common+0x26>
 800198a:	3301      	adds	r3, #1
 800198c:	6033      	str	r3, [r6, #0]
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	0699      	lsls	r1, r3, #26
 8001992:	bf42      	ittt	mi
 8001994:	6833      	ldrmi	r3, [r6, #0]
 8001996:	3302      	addmi	r3, #2
 8001998:	6033      	strmi	r3, [r6, #0]
 800199a:	6825      	ldr	r5, [r4, #0]
 800199c:	f015 0506 	ands.w	r5, r5, #6
 80019a0:	d106      	bne.n	80019b0 <_printf_common+0x48>
 80019a2:	f104 0a19 	add.w	sl, r4, #25
 80019a6:	68e3      	ldr	r3, [r4, #12]
 80019a8:	6832      	ldr	r2, [r6, #0]
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	42ab      	cmp	r3, r5
 80019ae:	dc28      	bgt.n	8001a02 <_printf_common+0x9a>
 80019b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80019b4:	1e13      	subs	r3, r2, #0
 80019b6:	6822      	ldr	r2, [r4, #0]
 80019b8:	bf18      	it	ne
 80019ba:	2301      	movne	r3, #1
 80019bc:	0692      	lsls	r2, r2, #26
 80019be:	d42d      	bmi.n	8001a1c <_printf_common+0xb4>
 80019c0:	4649      	mov	r1, r9
 80019c2:	4638      	mov	r0, r7
 80019c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019c8:	47c0      	blx	r8
 80019ca:	3001      	adds	r0, #1
 80019cc:	d020      	beq.n	8001a10 <_printf_common+0xa8>
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	68e5      	ldr	r5, [r4, #12]
 80019d2:	f003 0306 	and.w	r3, r3, #6
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf18      	it	ne
 80019da:	2500      	movne	r5, #0
 80019dc:	6832      	ldr	r2, [r6, #0]
 80019de:	f04f 0600 	mov.w	r6, #0
 80019e2:	68a3      	ldr	r3, [r4, #8]
 80019e4:	bf08      	it	eq
 80019e6:	1aad      	subeq	r5, r5, r2
 80019e8:	6922      	ldr	r2, [r4, #16]
 80019ea:	bf08      	it	eq
 80019ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019f0:	4293      	cmp	r3, r2
 80019f2:	bfc4      	itt	gt
 80019f4:	1a9b      	subgt	r3, r3, r2
 80019f6:	18ed      	addgt	r5, r5, r3
 80019f8:	341a      	adds	r4, #26
 80019fa:	42b5      	cmp	r5, r6
 80019fc:	d11a      	bne.n	8001a34 <_printf_common+0xcc>
 80019fe:	2000      	movs	r0, #0
 8001a00:	e008      	b.n	8001a14 <_printf_common+0xac>
 8001a02:	2301      	movs	r3, #1
 8001a04:	4652      	mov	r2, sl
 8001a06:	4649      	mov	r1, r9
 8001a08:	4638      	mov	r0, r7
 8001a0a:	47c0      	blx	r8
 8001a0c:	3001      	adds	r0, #1
 8001a0e:	d103      	bne.n	8001a18 <_printf_common+0xb0>
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a18:	3501      	adds	r5, #1
 8001a1a:	e7c4      	b.n	80019a6 <_printf_common+0x3e>
 8001a1c:	2030      	movs	r0, #48	; 0x30
 8001a1e:	18e1      	adds	r1, r4, r3
 8001a20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a2a:	4422      	add	r2, r4
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a32:	e7c5      	b.n	80019c0 <_printf_common+0x58>
 8001a34:	2301      	movs	r3, #1
 8001a36:	4622      	mov	r2, r4
 8001a38:	4649      	mov	r1, r9
 8001a3a:	4638      	mov	r0, r7
 8001a3c:	47c0      	blx	r8
 8001a3e:	3001      	adds	r0, #1
 8001a40:	d0e6      	beq.n	8001a10 <_printf_common+0xa8>
 8001a42:	3601      	adds	r6, #1
 8001a44:	e7d9      	b.n	80019fa <_printf_common+0x92>
	...

08001a48 <_printf_i>:
 8001a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a4c:	7e0f      	ldrb	r7, [r1, #24]
 8001a4e:	4691      	mov	r9, r2
 8001a50:	2f78      	cmp	r7, #120	; 0x78
 8001a52:	4680      	mov	r8, r0
 8001a54:	460c      	mov	r4, r1
 8001a56:	469a      	mov	sl, r3
 8001a58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001a5e:	d807      	bhi.n	8001a70 <_printf_i+0x28>
 8001a60:	2f62      	cmp	r7, #98	; 0x62
 8001a62:	d80a      	bhi.n	8001a7a <_printf_i+0x32>
 8001a64:	2f00      	cmp	r7, #0
 8001a66:	f000 80d9 	beq.w	8001c1c <_printf_i+0x1d4>
 8001a6a:	2f58      	cmp	r7, #88	; 0x58
 8001a6c:	f000 80a4 	beq.w	8001bb8 <_printf_i+0x170>
 8001a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a78:	e03a      	b.n	8001af0 <_printf_i+0xa8>
 8001a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a7e:	2b15      	cmp	r3, #21
 8001a80:	d8f6      	bhi.n	8001a70 <_printf_i+0x28>
 8001a82:	a101      	add	r1, pc, #4	; (adr r1, 8001a88 <_printf_i+0x40>)
 8001a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a88:	08001ae1 	.word	0x08001ae1
 8001a8c:	08001af5 	.word	0x08001af5
 8001a90:	08001a71 	.word	0x08001a71
 8001a94:	08001a71 	.word	0x08001a71
 8001a98:	08001a71 	.word	0x08001a71
 8001a9c:	08001a71 	.word	0x08001a71
 8001aa0:	08001af5 	.word	0x08001af5
 8001aa4:	08001a71 	.word	0x08001a71
 8001aa8:	08001a71 	.word	0x08001a71
 8001aac:	08001a71 	.word	0x08001a71
 8001ab0:	08001a71 	.word	0x08001a71
 8001ab4:	08001c03 	.word	0x08001c03
 8001ab8:	08001b25 	.word	0x08001b25
 8001abc:	08001be5 	.word	0x08001be5
 8001ac0:	08001a71 	.word	0x08001a71
 8001ac4:	08001a71 	.word	0x08001a71
 8001ac8:	08001c25 	.word	0x08001c25
 8001acc:	08001a71 	.word	0x08001a71
 8001ad0:	08001b25 	.word	0x08001b25
 8001ad4:	08001a71 	.word	0x08001a71
 8001ad8:	08001a71 	.word	0x08001a71
 8001adc:	08001bed 	.word	0x08001bed
 8001ae0:	682b      	ldr	r3, [r5, #0]
 8001ae2:	1d1a      	adds	r2, r3, #4
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	602a      	str	r2, [r5, #0]
 8001ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0a4      	b.n	8001c3e <_printf_i+0x1f6>
 8001af4:	6820      	ldr	r0, [r4, #0]
 8001af6:	6829      	ldr	r1, [r5, #0]
 8001af8:	0606      	lsls	r6, r0, #24
 8001afa:	f101 0304 	add.w	r3, r1, #4
 8001afe:	d50a      	bpl.n	8001b16 <_printf_i+0xce>
 8001b00:	680e      	ldr	r6, [r1, #0]
 8001b02:	602b      	str	r3, [r5, #0]
 8001b04:	2e00      	cmp	r6, #0
 8001b06:	da03      	bge.n	8001b10 <_printf_i+0xc8>
 8001b08:	232d      	movs	r3, #45	; 0x2d
 8001b0a:	4276      	negs	r6, r6
 8001b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b10:	230a      	movs	r3, #10
 8001b12:	485e      	ldr	r0, [pc, #376]	; (8001c8c <_printf_i+0x244>)
 8001b14:	e019      	b.n	8001b4a <_printf_i+0x102>
 8001b16:	680e      	ldr	r6, [r1, #0]
 8001b18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b1c:	602b      	str	r3, [r5, #0]
 8001b1e:	bf18      	it	ne
 8001b20:	b236      	sxthne	r6, r6
 8001b22:	e7ef      	b.n	8001b04 <_printf_i+0xbc>
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	6820      	ldr	r0, [r4, #0]
 8001b28:	1d19      	adds	r1, r3, #4
 8001b2a:	6029      	str	r1, [r5, #0]
 8001b2c:	0601      	lsls	r1, r0, #24
 8001b2e:	d501      	bpl.n	8001b34 <_printf_i+0xec>
 8001b30:	681e      	ldr	r6, [r3, #0]
 8001b32:	e002      	b.n	8001b3a <_printf_i+0xf2>
 8001b34:	0646      	lsls	r6, r0, #25
 8001b36:	d5fb      	bpl.n	8001b30 <_printf_i+0xe8>
 8001b38:	881e      	ldrh	r6, [r3, #0]
 8001b3a:	2f6f      	cmp	r7, #111	; 0x6f
 8001b3c:	bf0c      	ite	eq
 8001b3e:	2308      	moveq	r3, #8
 8001b40:	230a      	movne	r3, #10
 8001b42:	4852      	ldr	r0, [pc, #328]	; (8001c8c <_printf_i+0x244>)
 8001b44:	2100      	movs	r1, #0
 8001b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b4a:	6865      	ldr	r5, [r4, #4]
 8001b4c:	2d00      	cmp	r5, #0
 8001b4e:	bfa8      	it	ge
 8001b50:	6821      	ldrge	r1, [r4, #0]
 8001b52:	60a5      	str	r5, [r4, #8]
 8001b54:	bfa4      	itt	ge
 8001b56:	f021 0104 	bicge.w	r1, r1, #4
 8001b5a:	6021      	strge	r1, [r4, #0]
 8001b5c:	b90e      	cbnz	r6, 8001b62 <_printf_i+0x11a>
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	d04d      	beq.n	8001bfe <_printf_i+0x1b6>
 8001b62:	4615      	mov	r5, r2
 8001b64:	fbb6 f1f3 	udiv	r1, r6, r3
 8001b68:	fb03 6711 	mls	r7, r3, r1, r6
 8001b6c:	5dc7      	ldrb	r7, [r0, r7]
 8001b6e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001b72:	4637      	mov	r7, r6
 8001b74:	42bb      	cmp	r3, r7
 8001b76:	460e      	mov	r6, r1
 8001b78:	d9f4      	bls.n	8001b64 <_printf_i+0x11c>
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d10b      	bne.n	8001b96 <_printf_i+0x14e>
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	07de      	lsls	r6, r3, #31
 8001b82:	d508      	bpl.n	8001b96 <_printf_i+0x14e>
 8001b84:	6923      	ldr	r3, [r4, #16]
 8001b86:	6861      	ldr	r1, [r4, #4]
 8001b88:	4299      	cmp	r1, r3
 8001b8a:	bfde      	ittt	le
 8001b8c:	2330      	movle	r3, #48	; 0x30
 8001b8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b96:	1b52      	subs	r2, r2, r5
 8001b98:	6122      	str	r2, [r4, #16]
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	4640      	mov	r0, r8
 8001ba0:	f8cd a000 	str.w	sl, [sp]
 8001ba4:	aa03      	add	r2, sp, #12
 8001ba6:	f7ff fedf 	bl	8001968 <_printf_common>
 8001baa:	3001      	adds	r0, #1
 8001bac:	d14c      	bne.n	8001c48 <_printf_i+0x200>
 8001bae:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb2:	b004      	add	sp, #16
 8001bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bb8:	4834      	ldr	r0, [pc, #208]	; (8001c8c <_printf_i+0x244>)
 8001bba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001bbe:	6829      	ldr	r1, [r5, #0]
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	f851 6b04 	ldr.w	r6, [r1], #4
 8001bc6:	6029      	str	r1, [r5, #0]
 8001bc8:	061d      	lsls	r5, r3, #24
 8001bca:	d514      	bpl.n	8001bf6 <_printf_i+0x1ae>
 8001bcc:	07df      	lsls	r7, r3, #31
 8001bce:	bf44      	itt	mi
 8001bd0:	f043 0320 	orrmi.w	r3, r3, #32
 8001bd4:	6023      	strmi	r3, [r4, #0]
 8001bd6:	b91e      	cbnz	r6, 8001be0 <_printf_i+0x198>
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	f023 0320 	bic.w	r3, r3, #32
 8001bde:	6023      	str	r3, [r4, #0]
 8001be0:	2310      	movs	r3, #16
 8001be2:	e7af      	b.n	8001b44 <_printf_i+0xfc>
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	f043 0320 	orr.w	r3, r3, #32
 8001bea:	6023      	str	r3, [r4, #0]
 8001bec:	2378      	movs	r3, #120	; 0x78
 8001bee:	4828      	ldr	r0, [pc, #160]	; (8001c90 <_printf_i+0x248>)
 8001bf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001bf4:	e7e3      	b.n	8001bbe <_printf_i+0x176>
 8001bf6:	0659      	lsls	r1, r3, #25
 8001bf8:	bf48      	it	mi
 8001bfa:	b2b6      	uxthmi	r6, r6
 8001bfc:	e7e6      	b.n	8001bcc <_printf_i+0x184>
 8001bfe:	4615      	mov	r5, r2
 8001c00:	e7bb      	b.n	8001b7a <_printf_i+0x132>
 8001c02:	682b      	ldr	r3, [r5, #0]
 8001c04:	6826      	ldr	r6, [r4, #0]
 8001c06:	1d18      	adds	r0, r3, #4
 8001c08:	6961      	ldr	r1, [r4, #20]
 8001c0a:	6028      	str	r0, [r5, #0]
 8001c0c:	0635      	lsls	r5, r6, #24
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	d501      	bpl.n	8001c16 <_printf_i+0x1ce>
 8001c12:	6019      	str	r1, [r3, #0]
 8001c14:	e002      	b.n	8001c1c <_printf_i+0x1d4>
 8001c16:	0670      	lsls	r0, r6, #25
 8001c18:	d5fb      	bpl.n	8001c12 <_printf_i+0x1ca>
 8001c1a:	8019      	strh	r1, [r3, #0]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	4615      	mov	r5, r2
 8001c20:	6123      	str	r3, [r4, #16]
 8001c22:	e7ba      	b.n	8001b9a <_printf_i+0x152>
 8001c24:	682b      	ldr	r3, [r5, #0]
 8001c26:	2100      	movs	r1, #0
 8001c28:	1d1a      	adds	r2, r3, #4
 8001c2a:	602a      	str	r2, [r5, #0]
 8001c2c:	681d      	ldr	r5, [r3, #0]
 8001c2e:	6862      	ldr	r2, [r4, #4]
 8001c30:	4628      	mov	r0, r5
 8001c32:	f000 fa9b 	bl	800216c <memchr>
 8001c36:	b108      	cbz	r0, 8001c3c <_printf_i+0x1f4>
 8001c38:	1b40      	subs	r0, r0, r5
 8001c3a:	6060      	str	r0, [r4, #4]
 8001c3c:	6863      	ldr	r3, [r4, #4]
 8001c3e:	6123      	str	r3, [r4, #16]
 8001c40:	2300      	movs	r3, #0
 8001c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c46:	e7a8      	b.n	8001b9a <_printf_i+0x152>
 8001c48:	462a      	mov	r2, r5
 8001c4a:	4649      	mov	r1, r9
 8001c4c:	4640      	mov	r0, r8
 8001c4e:	6923      	ldr	r3, [r4, #16]
 8001c50:	47d0      	blx	sl
 8001c52:	3001      	adds	r0, #1
 8001c54:	d0ab      	beq.n	8001bae <_printf_i+0x166>
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	079b      	lsls	r3, r3, #30
 8001c5a:	d413      	bmi.n	8001c84 <_printf_i+0x23c>
 8001c5c:	68e0      	ldr	r0, [r4, #12]
 8001c5e:	9b03      	ldr	r3, [sp, #12]
 8001c60:	4298      	cmp	r0, r3
 8001c62:	bfb8      	it	lt
 8001c64:	4618      	movlt	r0, r3
 8001c66:	e7a4      	b.n	8001bb2 <_printf_i+0x16a>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	4632      	mov	r2, r6
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	4640      	mov	r0, r8
 8001c70:	47d0      	blx	sl
 8001c72:	3001      	adds	r0, #1
 8001c74:	d09b      	beq.n	8001bae <_printf_i+0x166>
 8001c76:	3501      	adds	r5, #1
 8001c78:	68e3      	ldr	r3, [r4, #12]
 8001c7a:	9903      	ldr	r1, [sp, #12]
 8001c7c:	1a5b      	subs	r3, r3, r1
 8001c7e:	42ab      	cmp	r3, r5
 8001c80:	dcf2      	bgt.n	8001c68 <_printf_i+0x220>
 8001c82:	e7eb      	b.n	8001c5c <_printf_i+0x214>
 8001c84:	2500      	movs	r5, #0
 8001c86:	f104 0619 	add.w	r6, r4, #25
 8001c8a:	e7f5      	b.n	8001c78 <_printf_i+0x230>
 8001c8c:	08002565 	.word	0x08002565
 8001c90:	08002576 	.word	0x08002576

08001c94 <_sbrk_r>:
 8001c94:	b538      	push	{r3, r4, r5, lr}
 8001c96:	2300      	movs	r3, #0
 8001c98:	4d05      	ldr	r5, [pc, #20]	; (8001cb0 <_sbrk_r+0x1c>)
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	602b      	str	r3, [r5, #0]
 8001ca0:	f7ff fa8e 	bl	80011c0 <_sbrk>
 8001ca4:	1c43      	adds	r3, r0, #1
 8001ca6:	d102      	bne.n	8001cae <_sbrk_r+0x1a>
 8001ca8:	682b      	ldr	r3, [r5, #0]
 8001caa:	b103      	cbz	r3, 8001cae <_sbrk_r+0x1a>
 8001cac:	6023      	str	r3, [r4, #0]
 8001cae:	bd38      	pop	{r3, r4, r5, pc}
 8001cb0:	20000490 	.word	0x20000490

08001cb4 <__sread>:
 8001cb4:	b510      	push	{r4, lr}
 8001cb6:	460c      	mov	r4, r1
 8001cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cbc:	f000 fab8 	bl	8002230 <_read_r>
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	bfab      	itete	ge
 8001cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8001cc8:	181b      	addge	r3, r3, r0
 8001cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001cce:	bfac      	ite	ge
 8001cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001cd2:	81a3      	strhlt	r3, [r4, #12]
 8001cd4:	bd10      	pop	{r4, pc}

08001cd6 <__swrite>:
 8001cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cda:	461f      	mov	r7, r3
 8001cdc:	898b      	ldrh	r3, [r1, #12]
 8001cde:	4605      	mov	r5, r0
 8001ce0:	05db      	lsls	r3, r3, #23
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	4616      	mov	r6, r2
 8001ce6:	d505      	bpl.n	8001cf4 <__swrite+0x1e>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	2200      	movs	r2, #0
 8001cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cf0:	f000 f9c4 	bl	800207c <_lseek_r>
 8001cf4:	89a3      	ldrh	r3, [r4, #12]
 8001cf6:	4632      	mov	r2, r6
 8001cf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cfc:	81a3      	strh	r3, [r4, #12]
 8001cfe:	4628      	mov	r0, r5
 8001d00:	463b      	mov	r3, r7
 8001d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d0a:	f000 b869 	b.w	8001de0 <_write_r>

08001d0e <__sseek>:
 8001d0e:	b510      	push	{r4, lr}
 8001d10:	460c      	mov	r4, r1
 8001d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d16:	f000 f9b1 	bl	800207c <_lseek_r>
 8001d1a:	1c43      	adds	r3, r0, #1
 8001d1c:	89a3      	ldrh	r3, [r4, #12]
 8001d1e:	bf15      	itete	ne
 8001d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d2a:	81a3      	strheq	r3, [r4, #12]
 8001d2c:	bf18      	it	ne
 8001d2e:	81a3      	strhne	r3, [r4, #12]
 8001d30:	bd10      	pop	{r4, pc}

08001d32 <__sclose>:
 8001d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d36:	f000 b8d3 	b.w	8001ee0 <_close_r>
	...

08001d3c <__swbuf_r>:
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3e:	460e      	mov	r6, r1
 8001d40:	4614      	mov	r4, r2
 8001d42:	4605      	mov	r5, r0
 8001d44:	b118      	cbz	r0, 8001d4e <__swbuf_r+0x12>
 8001d46:	6983      	ldr	r3, [r0, #24]
 8001d48:	b90b      	cbnz	r3, 8001d4e <__swbuf_r+0x12>
 8001d4a:	f7ff fb81 	bl	8001450 <__sinit>
 8001d4e:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <__swbuf_r+0x98>)
 8001d50:	429c      	cmp	r4, r3
 8001d52:	d12b      	bne.n	8001dac <__swbuf_r+0x70>
 8001d54:	686c      	ldr	r4, [r5, #4]
 8001d56:	69a3      	ldr	r3, [r4, #24]
 8001d58:	60a3      	str	r3, [r4, #8]
 8001d5a:	89a3      	ldrh	r3, [r4, #12]
 8001d5c:	071a      	lsls	r2, r3, #28
 8001d5e:	d52f      	bpl.n	8001dc0 <__swbuf_r+0x84>
 8001d60:	6923      	ldr	r3, [r4, #16]
 8001d62:	b36b      	cbz	r3, 8001dc0 <__swbuf_r+0x84>
 8001d64:	6923      	ldr	r3, [r4, #16]
 8001d66:	6820      	ldr	r0, [r4, #0]
 8001d68:	b2f6      	uxtb	r6, r6
 8001d6a:	1ac0      	subs	r0, r0, r3
 8001d6c:	6963      	ldr	r3, [r4, #20]
 8001d6e:	4637      	mov	r7, r6
 8001d70:	4283      	cmp	r3, r0
 8001d72:	dc04      	bgt.n	8001d7e <__swbuf_r+0x42>
 8001d74:	4621      	mov	r1, r4
 8001d76:	4628      	mov	r0, r5
 8001d78:	f000 f944 	bl	8002004 <_fflush_r>
 8001d7c:	bb30      	cbnz	r0, 8001dcc <__swbuf_r+0x90>
 8001d7e:	68a3      	ldr	r3, [r4, #8]
 8001d80:	3001      	adds	r0, #1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	60a3      	str	r3, [r4, #8]
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	6022      	str	r2, [r4, #0]
 8001d8c:	701e      	strb	r6, [r3, #0]
 8001d8e:	6963      	ldr	r3, [r4, #20]
 8001d90:	4283      	cmp	r3, r0
 8001d92:	d004      	beq.n	8001d9e <__swbuf_r+0x62>
 8001d94:	89a3      	ldrh	r3, [r4, #12]
 8001d96:	07db      	lsls	r3, r3, #31
 8001d98:	d506      	bpl.n	8001da8 <__swbuf_r+0x6c>
 8001d9a:	2e0a      	cmp	r6, #10
 8001d9c:	d104      	bne.n	8001da8 <__swbuf_r+0x6c>
 8001d9e:	4621      	mov	r1, r4
 8001da0:	4628      	mov	r0, r5
 8001da2:	f000 f92f 	bl	8002004 <_fflush_r>
 8001da6:	b988      	cbnz	r0, 8001dcc <__swbuf_r+0x90>
 8001da8:	4638      	mov	r0, r7
 8001daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <__swbuf_r+0x9c>)
 8001dae:	429c      	cmp	r4, r3
 8001db0:	d101      	bne.n	8001db6 <__swbuf_r+0x7a>
 8001db2:	68ac      	ldr	r4, [r5, #8]
 8001db4:	e7cf      	b.n	8001d56 <__swbuf_r+0x1a>
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <__swbuf_r+0xa0>)
 8001db8:	429c      	cmp	r4, r3
 8001dba:	bf08      	it	eq
 8001dbc:	68ec      	ldreq	r4, [r5, #12]
 8001dbe:	e7ca      	b.n	8001d56 <__swbuf_r+0x1a>
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	4628      	mov	r0, r5
 8001dc4:	f000 f81e 	bl	8001e04 <__swsetup_r>
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	d0cb      	beq.n	8001d64 <__swbuf_r+0x28>
 8001dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8001dd0:	e7ea      	b.n	8001da8 <__swbuf_r+0x6c>
 8001dd2:	bf00      	nop
 8001dd4:	08002514 	.word	0x08002514
 8001dd8:	08002534 	.word	0x08002534
 8001ddc:	080024f4 	.word	0x080024f4

08001de0 <_write_r>:
 8001de0:	b538      	push	{r3, r4, r5, lr}
 8001de2:	4604      	mov	r4, r0
 8001de4:	4608      	mov	r0, r1
 8001de6:	4611      	mov	r1, r2
 8001de8:	2200      	movs	r2, #0
 8001dea:	4d05      	ldr	r5, [pc, #20]	; (8001e00 <_write_r+0x20>)
 8001dec:	602a      	str	r2, [r5, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	f7ff f999 	bl	8001126 <_write>
 8001df4:	1c43      	adds	r3, r0, #1
 8001df6:	d102      	bne.n	8001dfe <_write_r+0x1e>
 8001df8:	682b      	ldr	r3, [r5, #0]
 8001dfa:	b103      	cbz	r3, 8001dfe <_write_r+0x1e>
 8001dfc:	6023      	str	r3, [r4, #0]
 8001dfe:	bd38      	pop	{r3, r4, r5, pc}
 8001e00:	20000490 	.word	0x20000490

08001e04 <__swsetup_r>:
 8001e04:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <__swsetup_r+0xcc>)
 8001e06:	b570      	push	{r4, r5, r6, lr}
 8001e08:	681d      	ldr	r5, [r3, #0]
 8001e0a:	4606      	mov	r6, r0
 8001e0c:	460c      	mov	r4, r1
 8001e0e:	b125      	cbz	r5, 8001e1a <__swsetup_r+0x16>
 8001e10:	69ab      	ldr	r3, [r5, #24]
 8001e12:	b913      	cbnz	r3, 8001e1a <__swsetup_r+0x16>
 8001e14:	4628      	mov	r0, r5
 8001e16:	f7ff fb1b 	bl	8001450 <__sinit>
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <__swsetup_r+0xd0>)
 8001e1c:	429c      	cmp	r4, r3
 8001e1e:	d10f      	bne.n	8001e40 <__swsetup_r+0x3c>
 8001e20:	686c      	ldr	r4, [r5, #4]
 8001e22:	89a3      	ldrh	r3, [r4, #12]
 8001e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e28:	0719      	lsls	r1, r3, #28
 8001e2a:	d42c      	bmi.n	8001e86 <__swsetup_r+0x82>
 8001e2c:	06dd      	lsls	r5, r3, #27
 8001e2e:	d411      	bmi.n	8001e54 <__swsetup_r+0x50>
 8001e30:	2309      	movs	r3, #9
 8001e32:	6033      	str	r3, [r6, #0]
 8001e34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	81a3      	strh	r3, [r4, #12]
 8001e3e:	e03e      	b.n	8001ebe <__swsetup_r+0xba>
 8001e40:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <__swsetup_r+0xd4>)
 8001e42:	429c      	cmp	r4, r3
 8001e44:	d101      	bne.n	8001e4a <__swsetup_r+0x46>
 8001e46:	68ac      	ldr	r4, [r5, #8]
 8001e48:	e7eb      	b.n	8001e22 <__swsetup_r+0x1e>
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <__swsetup_r+0xd8>)
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	bf08      	it	eq
 8001e50:	68ec      	ldreq	r4, [r5, #12]
 8001e52:	e7e6      	b.n	8001e22 <__swsetup_r+0x1e>
 8001e54:	0758      	lsls	r0, r3, #29
 8001e56:	d512      	bpl.n	8001e7e <__swsetup_r+0x7a>
 8001e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e5a:	b141      	cbz	r1, 8001e6e <__swsetup_r+0x6a>
 8001e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e60:	4299      	cmp	r1, r3
 8001e62:	d002      	beq.n	8001e6a <__swsetup_r+0x66>
 8001e64:	4630      	mov	r0, r6
 8001e66:	f000 f99b 	bl	80021a0 <_free_r>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	6363      	str	r3, [r4, #52]	; 0x34
 8001e6e:	89a3      	ldrh	r3, [r4, #12]
 8001e70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e74:	81a3      	strh	r3, [r4, #12]
 8001e76:	2300      	movs	r3, #0
 8001e78:	6063      	str	r3, [r4, #4]
 8001e7a:	6923      	ldr	r3, [r4, #16]
 8001e7c:	6023      	str	r3, [r4, #0]
 8001e7e:	89a3      	ldrh	r3, [r4, #12]
 8001e80:	f043 0308 	orr.w	r3, r3, #8
 8001e84:	81a3      	strh	r3, [r4, #12]
 8001e86:	6923      	ldr	r3, [r4, #16]
 8001e88:	b94b      	cbnz	r3, 8001e9e <__swsetup_r+0x9a>
 8001e8a:	89a3      	ldrh	r3, [r4, #12]
 8001e8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e94:	d003      	beq.n	8001e9e <__swsetup_r+0x9a>
 8001e96:	4621      	mov	r1, r4
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f000 f927 	bl	80020ec <__smakebuf_r>
 8001e9e:	89a0      	ldrh	r0, [r4, #12]
 8001ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ea4:	f010 0301 	ands.w	r3, r0, #1
 8001ea8:	d00a      	beq.n	8001ec0 <__swsetup_r+0xbc>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60a3      	str	r3, [r4, #8]
 8001eae:	6963      	ldr	r3, [r4, #20]
 8001eb0:	425b      	negs	r3, r3
 8001eb2:	61a3      	str	r3, [r4, #24]
 8001eb4:	6923      	ldr	r3, [r4, #16]
 8001eb6:	b943      	cbnz	r3, 8001eca <__swsetup_r+0xc6>
 8001eb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ebc:	d1ba      	bne.n	8001e34 <__swsetup_r+0x30>
 8001ebe:	bd70      	pop	{r4, r5, r6, pc}
 8001ec0:	0781      	lsls	r1, r0, #30
 8001ec2:	bf58      	it	pl
 8001ec4:	6963      	ldrpl	r3, [r4, #20]
 8001ec6:	60a3      	str	r3, [r4, #8]
 8001ec8:	e7f4      	b.n	8001eb4 <__swsetup_r+0xb0>
 8001eca:	2000      	movs	r0, #0
 8001ecc:	e7f7      	b.n	8001ebe <__swsetup_r+0xba>
 8001ece:	bf00      	nop
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	08002514 	.word	0x08002514
 8001ed8:	08002534 	.word	0x08002534
 8001edc:	080024f4 	.word	0x080024f4

08001ee0 <_close_r>:
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	4d05      	ldr	r5, [pc, #20]	; (8001efc <_close_r+0x1c>)
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	4608      	mov	r0, r1
 8001eea:	602b      	str	r3, [r5, #0]
 8001eec:	f7ff f937 	bl	800115e <_close>
 8001ef0:	1c43      	adds	r3, r0, #1
 8001ef2:	d102      	bne.n	8001efa <_close_r+0x1a>
 8001ef4:	682b      	ldr	r3, [r5, #0]
 8001ef6:	b103      	cbz	r3, 8001efa <_close_r+0x1a>
 8001ef8:	6023      	str	r3, [r4, #0]
 8001efa:	bd38      	pop	{r3, r4, r5, pc}
 8001efc:	20000490 	.word	0x20000490

08001f00 <__sflush_r>:
 8001f00:	898a      	ldrh	r2, [r1, #12]
 8001f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f04:	4605      	mov	r5, r0
 8001f06:	0710      	lsls	r0, r2, #28
 8001f08:	460c      	mov	r4, r1
 8001f0a:	d457      	bmi.n	8001fbc <__sflush_r+0xbc>
 8001f0c:	684b      	ldr	r3, [r1, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	dc04      	bgt.n	8001f1c <__sflush_r+0x1c>
 8001f12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	dc01      	bgt.n	8001f1c <__sflush_r+0x1c>
 8001f18:	2000      	movs	r0, #0
 8001f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f1e:	2e00      	cmp	r6, #0
 8001f20:	d0fa      	beq.n	8001f18 <__sflush_r+0x18>
 8001f22:	2300      	movs	r3, #0
 8001f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f28:	682f      	ldr	r7, [r5, #0]
 8001f2a:	602b      	str	r3, [r5, #0]
 8001f2c:	d032      	beq.n	8001f94 <__sflush_r+0x94>
 8001f2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f30:	89a3      	ldrh	r3, [r4, #12]
 8001f32:	075a      	lsls	r2, r3, #29
 8001f34:	d505      	bpl.n	8001f42 <__sflush_r+0x42>
 8001f36:	6863      	ldr	r3, [r4, #4]
 8001f38:	1ac0      	subs	r0, r0, r3
 8001f3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f3c:	b10b      	cbz	r3, 8001f42 <__sflush_r+0x42>
 8001f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f40:	1ac0      	subs	r0, r0, r3
 8001f42:	2300      	movs	r3, #0
 8001f44:	4602      	mov	r2, r0
 8001f46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f48:	4628      	mov	r0, r5
 8001f4a:	6a21      	ldr	r1, [r4, #32]
 8001f4c:	47b0      	blx	r6
 8001f4e:	1c43      	adds	r3, r0, #1
 8001f50:	89a3      	ldrh	r3, [r4, #12]
 8001f52:	d106      	bne.n	8001f62 <__sflush_r+0x62>
 8001f54:	6829      	ldr	r1, [r5, #0]
 8001f56:	291d      	cmp	r1, #29
 8001f58:	d82c      	bhi.n	8001fb4 <__sflush_r+0xb4>
 8001f5a:	4a29      	ldr	r2, [pc, #164]	; (8002000 <__sflush_r+0x100>)
 8001f5c:	40ca      	lsrs	r2, r1
 8001f5e:	07d6      	lsls	r6, r2, #31
 8001f60:	d528      	bpl.n	8001fb4 <__sflush_r+0xb4>
 8001f62:	2200      	movs	r2, #0
 8001f64:	6062      	str	r2, [r4, #4]
 8001f66:	6922      	ldr	r2, [r4, #16]
 8001f68:	04d9      	lsls	r1, r3, #19
 8001f6a:	6022      	str	r2, [r4, #0]
 8001f6c:	d504      	bpl.n	8001f78 <__sflush_r+0x78>
 8001f6e:	1c42      	adds	r2, r0, #1
 8001f70:	d101      	bne.n	8001f76 <__sflush_r+0x76>
 8001f72:	682b      	ldr	r3, [r5, #0]
 8001f74:	b903      	cbnz	r3, 8001f78 <__sflush_r+0x78>
 8001f76:	6560      	str	r0, [r4, #84]	; 0x54
 8001f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f7a:	602f      	str	r7, [r5, #0]
 8001f7c:	2900      	cmp	r1, #0
 8001f7e:	d0cb      	beq.n	8001f18 <__sflush_r+0x18>
 8001f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f84:	4299      	cmp	r1, r3
 8001f86:	d002      	beq.n	8001f8e <__sflush_r+0x8e>
 8001f88:	4628      	mov	r0, r5
 8001f8a:	f000 f909 	bl	80021a0 <_free_r>
 8001f8e:	2000      	movs	r0, #0
 8001f90:	6360      	str	r0, [r4, #52]	; 0x34
 8001f92:	e7c2      	b.n	8001f1a <__sflush_r+0x1a>
 8001f94:	6a21      	ldr	r1, [r4, #32]
 8001f96:	2301      	movs	r3, #1
 8001f98:	4628      	mov	r0, r5
 8001f9a:	47b0      	blx	r6
 8001f9c:	1c41      	adds	r1, r0, #1
 8001f9e:	d1c7      	bne.n	8001f30 <__sflush_r+0x30>
 8001fa0:	682b      	ldr	r3, [r5, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0c4      	beq.n	8001f30 <__sflush_r+0x30>
 8001fa6:	2b1d      	cmp	r3, #29
 8001fa8:	d001      	beq.n	8001fae <__sflush_r+0xae>
 8001faa:	2b16      	cmp	r3, #22
 8001fac:	d101      	bne.n	8001fb2 <__sflush_r+0xb2>
 8001fae:	602f      	str	r7, [r5, #0]
 8001fb0:	e7b2      	b.n	8001f18 <__sflush_r+0x18>
 8001fb2:	89a3      	ldrh	r3, [r4, #12]
 8001fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fb8:	81a3      	strh	r3, [r4, #12]
 8001fba:	e7ae      	b.n	8001f1a <__sflush_r+0x1a>
 8001fbc:	690f      	ldr	r7, [r1, #16]
 8001fbe:	2f00      	cmp	r7, #0
 8001fc0:	d0aa      	beq.n	8001f18 <__sflush_r+0x18>
 8001fc2:	0793      	lsls	r3, r2, #30
 8001fc4:	bf18      	it	ne
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	680e      	ldr	r6, [r1, #0]
 8001fca:	bf08      	it	eq
 8001fcc:	694b      	ldreq	r3, [r1, #20]
 8001fce:	1bf6      	subs	r6, r6, r7
 8001fd0:	600f      	str	r7, [r1, #0]
 8001fd2:	608b      	str	r3, [r1, #8]
 8001fd4:	2e00      	cmp	r6, #0
 8001fd6:	dd9f      	ble.n	8001f18 <__sflush_r+0x18>
 8001fd8:	4633      	mov	r3, r6
 8001fda:	463a      	mov	r2, r7
 8001fdc:	4628      	mov	r0, r5
 8001fde:	6a21      	ldr	r1, [r4, #32]
 8001fe0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001fe4:	47e0      	blx	ip
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	dc06      	bgt.n	8001ff8 <__sflush_r+0xf8>
 8001fea:	89a3      	ldrh	r3, [r4, #12]
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff4:	81a3      	strh	r3, [r4, #12]
 8001ff6:	e790      	b.n	8001f1a <__sflush_r+0x1a>
 8001ff8:	4407      	add	r7, r0
 8001ffa:	1a36      	subs	r6, r6, r0
 8001ffc:	e7ea      	b.n	8001fd4 <__sflush_r+0xd4>
 8001ffe:	bf00      	nop
 8002000:	20400001 	.word	0x20400001

08002004 <_fflush_r>:
 8002004:	b538      	push	{r3, r4, r5, lr}
 8002006:	690b      	ldr	r3, [r1, #16]
 8002008:	4605      	mov	r5, r0
 800200a:	460c      	mov	r4, r1
 800200c:	b913      	cbnz	r3, 8002014 <_fflush_r+0x10>
 800200e:	2500      	movs	r5, #0
 8002010:	4628      	mov	r0, r5
 8002012:	bd38      	pop	{r3, r4, r5, pc}
 8002014:	b118      	cbz	r0, 800201e <_fflush_r+0x1a>
 8002016:	6983      	ldr	r3, [r0, #24]
 8002018:	b90b      	cbnz	r3, 800201e <_fflush_r+0x1a>
 800201a:	f7ff fa19 	bl	8001450 <__sinit>
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <_fflush_r+0x6c>)
 8002020:	429c      	cmp	r4, r3
 8002022:	d11b      	bne.n	800205c <_fflush_r+0x58>
 8002024:	686c      	ldr	r4, [r5, #4]
 8002026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ef      	beq.n	800200e <_fflush_r+0xa>
 800202e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002030:	07d0      	lsls	r0, r2, #31
 8002032:	d404      	bmi.n	800203e <_fflush_r+0x3a>
 8002034:	0599      	lsls	r1, r3, #22
 8002036:	d402      	bmi.n	800203e <_fflush_r+0x3a>
 8002038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800203a:	f7ff faa7 	bl	800158c <__retarget_lock_acquire_recursive>
 800203e:	4628      	mov	r0, r5
 8002040:	4621      	mov	r1, r4
 8002042:	f7ff ff5d 	bl	8001f00 <__sflush_r>
 8002046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002048:	4605      	mov	r5, r0
 800204a:	07da      	lsls	r2, r3, #31
 800204c:	d4e0      	bmi.n	8002010 <_fflush_r+0xc>
 800204e:	89a3      	ldrh	r3, [r4, #12]
 8002050:	059b      	lsls	r3, r3, #22
 8002052:	d4dd      	bmi.n	8002010 <_fflush_r+0xc>
 8002054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002056:	f7ff fa9a 	bl	800158e <__retarget_lock_release_recursive>
 800205a:	e7d9      	b.n	8002010 <_fflush_r+0xc>
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <_fflush_r+0x70>)
 800205e:	429c      	cmp	r4, r3
 8002060:	d101      	bne.n	8002066 <_fflush_r+0x62>
 8002062:	68ac      	ldr	r4, [r5, #8]
 8002064:	e7df      	b.n	8002026 <_fflush_r+0x22>
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <_fflush_r+0x74>)
 8002068:	429c      	cmp	r4, r3
 800206a:	bf08      	it	eq
 800206c:	68ec      	ldreq	r4, [r5, #12]
 800206e:	e7da      	b.n	8002026 <_fflush_r+0x22>
 8002070:	08002514 	.word	0x08002514
 8002074:	08002534 	.word	0x08002534
 8002078:	080024f4 	.word	0x080024f4

0800207c <_lseek_r>:
 800207c:	b538      	push	{r3, r4, r5, lr}
 800207e:	4604      	mov	r4, r0
 8002080:	4608      	mov	r0, r1
 8002082:	4611      	mov	r1, r2
 8002084:	2200      	movs	r2, #0
 8002086:	4d05      	ldr	r5, [pc, #20]	; (800209c <_lseek_r+0x20>)
 8002088:	602a      	str	r2, [r5, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	f7ff f88b 	bl	80011a6 <_lseek>
 8002090:	1c43      	adds	r3, r0, #1
 8002092:	d102      	bne.n	800209a <_lseek_r+0x1e>
 8002094:	682b      	ldr	r3, [r5, #0]
 8002096:	b103      	cbz	r3, 800209a <_lseek_r+0x1e>
 8002098:	6023      	str	r3, [r4, #0]
 800209a:	bd38      	pop	{r3, r4, r5, pc}
 800209c:	20000490 	.word	0x20000490

080020a0 <__swhatbuf_r>:
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	460e      	mov	r6, r1
 80020a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020a8:	4614      	mov	r4, r2
 80020aa:	2900      	cmp	r1, #0
 80020ac:	461d      	mov	r5, r3
 80020ae:	b096      	sub	sp, #88	; 0x58
 80020b0:	da08      	bge.n	80020c4 <__swhatbuf_r+0x24>
 80020b2:	2200      	movs	r2, #0
 80020b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80020b8:	602a      	str	r2, [r5, #0]
 80020ba:	061a      	lsls	r2, r3, #24
 80020bc:	d410      	bmi.n	80020e0 <__swhatbuf_r+0x40>
 80020be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c2:	e00e      	b.n	80020e2 <__swhatbuf_r+0x42>
 80020c4:	466a      	mov	r2, sp
 80020c6:	f000 f8c5 	bl	8002254 <_fstat_r>
 80020ca:	2800      	cmp	r0, #0
 80020cc:	dbf1      	blt.n	80020b2 <__swhatbuf_r+0x12>
 80020ce:	9a01      	ldr	r2, [sp, #4]
 80020d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020d8:	425a      	negs	r2, r3
 80020da:	415a      	adcs	r2, r3
 80020dc:	602a      	str	r2, [r5, #0]
 80020de:	e7ee      	b.n	80020be <__swhatbuf_r+0x1e>
 80020e0:	2340      	movs	r3, #64	; 0x40
 80020e2:	2000      	movs	r0, #0
 80020e4:	6023      	str	r3, [r4, #0]
 80020e6:	b016      	add	sp, #88	; 0x58
 80020e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080020ec <__smakebuf_r>:
 80020ec:	898b      	ldrh	r3, [r1, #12]
 80020ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020f0:	079d      	lsls	r5, r3, #30
 80020f2:	4606      	mov	r6, r0
 80020f4:	460c      	mov	r4, r1
 80020f6:	d507      	bpl.n	8002108 <__smakebuf_r+0x1c>
 80020f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020fc:	6023      	str	r3, [r4, #0]
 80020fe:	6123      	str	r3, [r4, #16]
 8002100:	2301      	movs	r3, #1
 8002102:	6163      	str	r3, [r4, #20]
 8002104:	b002      	add	sp, #8
 8002106:	bd70      	pop	{r4, r5, r6, pc}
 8002108:	466a      	mov	r2, sp
 800210a:	ab01      	add	r3, sp, #4
 800210c:	f7ff ffc8 	bl	80020a0 <__swhatbuf_r>
 8002110:	9900      	ldr	r1, [sp, #0]
 8002112:	4605      	mov	r5, r0
 8002114:	4630      	mov	r0, r6
 8002116:	f7ff fa5b 	bl	80015d0 <_malloc_r>
 800211a:	b948      	cbnz	r0, 8002130 <__smakebuf_r+0x44>
 800211c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002120:	059a      	lsls	r2, r3, #22
 8002122:	d4ef      	bmi.n	8002104 <__smakebuf_r+0x18>
 8002124:	f023 0303 	bic.w	r3, r3, #3
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	81a3      	strh	r3, [r4, #12]
 800212e:	e7e3      	b.n	80020f8 <__smakebuf_r+0xc>
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <__smakebuf_r+0x7c>)
 8002132:	62b3      	str	r3, [r6, #40]	; 0x28
 8002134:	89a3      	ldrh	r3, [r4, #12]
 8002136:	6020      	str	r0, [r4, #0]
 8002138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800213c:	81a3      	strh	r3, [r4, #12]
 800213e:	9b00      	ldr	r3, [sp, #0]
 8002140:	6120      	str	r0, [r4, #16]
 8002142:	6163      	str	r3, [r4, #20]
 8002144:	9b01      	ldr	r3, [sp, #4]
 8002146:	b15b      	cbz	r3, 8002160 <__smakebuf_r+0x74>
 8002148:	4630      	mov	r0, r6
 800214a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800214e:	f000 f893 	bl	8002278 <_isatty_r>
 8002152:	b128      	cbz	r0, 8002160 <__smakebuf_r+0x74>
 8002154:	89a3      	ldrh	r3, [r4, #12]
 8002156:	f023 0303 	bic.w	r3, r3, #3
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	81a3      	strh	r3, [r4, #12]
 8002160:	89a0      	ldrh	r0, [r4, #12]
 8002162:	4305      	orrs	r5, r0
 8002164:	81a5      	strh	r5, [r4, #12]
 8002166:	e7cd      	b.n	8002104 <__smakebuf_r+0x18>
 8002168:	080013e9 	.word	0x080013e9

0800216c <memchr>:
 800216c:	4603      	mov	r3, r0
 800216e:	b510      	push	{r4, lr}
 8002170:	b2c9      	uxtb	r1, r1
 8002172:	4402      	add	r2, r0
 8002174:	4293      	cmp	r3, r2
 8002176:	4618      	mov	r0, r3
 8002178:	d101      	bne.n	800217e <memchr+0x12>
 800217a:	2000      	movs	r0, #0
 800217c:	e003      	b.n	8002186 <memchr+0x1a>
 800217e:	7804      	ldrb	r4, [r0, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	428c      	cmp	r4, r1
 8002184:	d1f6      	bne.n	8002174 <memchr+0x8>
 8002186:	bd10      	pop	{r4, pc}

08002188 <__malloc_lock>:
 8002188:	4801      	ldr	r0, [pc, #4]	; (8002190 <__malloc_lock+0x8>)
 800218a:	f7ff b9ff 	b.w	800158c <__retarget_lock_acquire_recursive>
 800218e:	bf00      	nop
 8002190:	20000484 	.word	0x20000484

08002194 <__malloc_unlock>:
 8002194:	4801      	ldr	r0, [pc, #4]	; (800219c <__malloc_unlock+0x8>)
 8002196:	f7ff b9fa 	b.w	800158e <__retarget_lock_release_recursive>
 800219a:	bf00      	nop
 800219c:	20000484 	.word	0x20000484

080021a0 <_free_r>:
 80021a0:	b538      	push	{r3, r4, r5, lr}
 80021a2:	4605      	mov	r5, r0
 80021a4:	2900      	cmp	r1, #0
 80021a6:	d040      	beq.n	800222a <_free_r+0x8a>
 80021a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021ac:	1f0c      	subs	r4, r1, #4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bfb8      	it	lt
 80021b2:	18e4      	addlt	r4, r4, r3
 80021b4:	f7ff ffe8 	bl	8002188 <__malloc_lock>
 80021b8:	4a1c      	ldr	r2, [pc, #112]	; (800222c <_free_r+0x8c>)
 80021ba:	6813      	ldr	r3, [r2, #0]
 80021bc:	b933      	cbnz	r3, 80021cc <_free_r+0x2c>
 80021be:	6063      	str	r3, [r4, #4]
 80021c0:	6014      	str	r4, [r2, #0]
 80021c2:	4628      	mov	r0, r5
 80021c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021c8:	f7ff bfe4 	b.w	8002194 <__malloc_unlock>
 80021cc:	42a3      	cmp	r3, r4
 80021ce:	d908      	bls.n	80021e2 <_free_r+0x42>
 80021d0:	6820      	ldr	r0, [r4, #0]
 80021d2:	1821      	adds	r1, r4, r0
 80021d4:	428b      	cmp	r3, r1
 80021d6:	bf01      	itttt	eq
 80021d8:	6819      	ldreq	r1, [r3, #0]
 80021da:	685b      	ldreq	r3, [r3, #4]
 80021dc:	1809      	addeq	r1, r1, r0
 80021de:	6021      	streq	r1, [r4, #0]
 80021e0:	e7ed      	b.n	80021be <_free_r+0x1e>
 80021e2:	461a      	mov	r2, r3
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	b10b      	cbz	r3, 80021ec <_free_r+0x4c>
 80021e8:	42a3      	cmp	r3, r4
 80021ea:	d9fa      	bls.n	80021e2 <_free_r+0x42>
 80021ec:	6811      	ldr	r1, [r2, #0]
 80021ee:	1850      	adds	r0, r2, r1
 80021f0:	42a0      	cmp	r0, r4
 80021f2:	d10b      	bne.n	800220c <_free_r+0x6c>
 80021f4:	6820      	ldr	r0, [r4, #0]
 80021f6:	4401      	add	r1, r0
 80021f8:	1850      	adds	r0, r2, r1
 80021fa:	4283      	cmp	r3, r0
 80021fc:	6011      	str	r1, [r2, #0]
 80021fe:	d1e0      	bne.n	80021c2 <_free_r+0x22>
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4401      	add	r1, r0
 8002206:	6011      	str	r1, [r2, #0]
 8002208:	6053      	str	r3, [r2, #4]
 800220a:	e7da      	b.n	80021c2 <_free_r+0x22>
 800220c:	d902      	bls.n	8002214 <_free_r+0x74>
 800220e:	230c      	movs	r3, #12
 8002210:	602b      	str	r3, [r5, #0]
 8002212:	e7d6      	b.n	80021c2 <_free_r+0x22>
 8002214:	6820      	ldr	r0, [r4, #0]
 8002216:	1821      	adds	r1, r4, r0
 8002218:	428b      	cmp	r3, r1
 800221a:	bf01      	itttt	eq
 800221c:	6819      	ldreq	r1, [r3, #0]
 800221e:	685b      	ldreq	r3, [r3, #4]
 8002220:	1809      	addeq	r1, r1, r0
 8002222:	6021      	streq	r1, [r4, #0]
 8002224:	6063      	str	r3, [r4, #4]
 8002226:	6054      	str	r4, [r2, #4]
 8002228:	e7cb      	b.n	80021c2 <_free_r+0x22>
 800222a:	bd38      	pop	{r3, r4, r5, pc}
 800222c:	20000488 	.word	0x20000488

08002230 <_read_r>:
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	4604      	mov	r4, r0
 8002234:	4608      	mov	r0, r1
 8002236:	4611      	mov	r1, r2
 8002238:	2200      	movs	r2, #0
 800223a:	4d05      	ldr	r5, [pc, #20]	; (8002250 <_read_r+0x20>)
 800223c:	602a      	str	r2, [r5, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	f7fe ff54 	bl	80010ec <_read>
 8002244:	1c43      	adds	r3, r0, #1
 8002246:	d102      	bne.n	800224e <_read_r+0x1e>
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	b103      	cbz	r3, 800224e <_read_r+0x1e>
 800224c:	6023      	str	r3, [r4, #0]
 800224e:	bd38      	pop	{r3, r4, r5, pc}
 8002250:	20000490 	.word	0x20000490

08002254 <_fstat_r>:
 8002254:	b538      	push	{r3, r4, r5, lr}
 8002256:	2300      	movs	r3, #0
 8002258:	4d06      	ldr	r5, [pc, #24]	; (8002274 <_fstat_r+0x20>)
 800225a:	4604      	mov	r4, r0
 800225c:	4608      	mov	r0, r1
 800225e:	4611      	mov	r1, r2
 8002260:	602b      	str	r3, [r5, #0]
 8002262:	f7fe ff87 	bl	8001174 <_fstat>
 8002266:	1c43      	adds	r3, r0, #1
 8002268:	d102      	bne.n	8002270 <_fstat_r+0x1c>
 800226a:	682b      	ldr	r3, [r5, #0]
 800226c:	b103      	cbz	r3, 8002270 <_fstat_r+0x1c>
 800226e:	6023      	str	r3, [r4, #0]
 8002270:	bd38      	pop	{r3, r4, r5, pc}
 8002272:	bf00      	nop
 8002274:	20000490 	.word	0x20000490

08002278 <_isatty_r>:
 8002278:	b538      	push	{r3, r4, r5, lr}
 800227a:	2300      	movs	r3, #0
 800227c:	4d05      	ldr	r5, [pc, #20]	; (8002294 <_isatty_r+0x1c>)
 800227e:	4604      	mov	r4, r0
 8002280:	4608      	mov	r0, r1
 8002282:	602b      	str	r3, [r5, #0]
 8002284:	f7fe ff85 	bl	8001192 <_isatty>
 8002288:	1c43      	adds	r3, r0, #1
 800228a:	d102      	bne.n	8002292 <_isatty_r+0x1a>
 800228c:	682b      	ldr	r3, [r5, #0]
 800228e:	b103      	cbz	r3, 8002292 <_isatty_r+0x1a>
 8002290:	6023      	str	r3, [r4, #0]
 8002292:	bd38      	pop	{r3, r4, r5, pc}
 8002294:	20000490 	.word	0x20000490

08002298 <_init>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	bf00      	nop
 800229c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229e:	bc08      	pop	{r3}
 80022a0:	469e      	mov	lr, r3
 80022a2:	4770      	bx	lr

080022a4 <_fini>:
 80022a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a6:	bf00      	nop
 80022a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022aa:	bc08      	pop	{r3}
 80022ac:	469e      	mov	lr, r3
 80022ae:	4770      	bx	lr
